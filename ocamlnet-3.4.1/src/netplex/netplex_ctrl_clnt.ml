(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * netplex_ctrl.x
 *
 ************************************************************)
module Make'Control(U'C:Rpc_client.USE_CLIENT) = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Control'V1
    type t = U'C.t
    
    let ping client arg =
      _to_Control'V1'ping'res (U'C.unbound_sync_call client _program "ping" (_of_Control'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      U'C.unbound_async_call client _program "ping" (_of_Control'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_Control'V1'ping'res (g())))
      
    
    let poll client arg =
      _to_Control'V1'poll'res (U'C.unbound_sync_call client _program "poll" (_of_Control'V1'poll'arg arg))
    
    let poll'async client arg pass_reply =
      U'C.unbound_async_call client _program "poll" (_of_Control'V1'poll'arg arg)
        (fun g -> pass_reply (fun () -> _to_Control'V1'poll'res (g())))
      
    
    let accepted client arg =
      _to_Control'V1'accepted'res (U'C.unbound_sync_call client _program "accepted" (_of_Control'V1'accepted'arg arg))
    
    let accepted'async client arg pass_reply =
      U'C.unbound_async_call client _program "accepted" (_of_Control'V1'accepted'arg arg)
        (fun g -> pass_reply (fun () -> _to_Control'V1'accepted'res (g())))
      
    
    
  end
  
end

module Control = struct
  module V1 = struct
    module M'0 = Make'Control(Rpc_client)
    include M'0.V1
    open Netplex_ctrl_aux
    let _program = program_Control'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
  end
  
end

module Make'System(U'C:Rpc_client.USE_CLIENT) = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_System'V1
    type t = U'C.t
    
    let ping client arg =
      _to_System'V1'ping'res (U'C.unbound_sync_call client _program "ping" (_of_System'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      U'C.unbound_async_call client _program "ping" (_of_System'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'ping'res (g())))
      
    
    let lookup client arg =
      _to_System'V1'lookup'res (U'C.unbound_sync_call client _program "lookup" (_of_System'V1'lookup'arg arg))
    
    let lookup'async client arg pass_reply =
      U'C.unbound_async_call client _program "lookup" (_of_System'V1'lookup'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'lookup'res (g())))
      
    
    let send_message client arg =
      _to_System'V1'send_message'res (U'C.unbound_sync_call client _program "send_message" (_of_System'V1'send_message'arg arg))
    
    let send_message'async client arg pass_reply =
      U'C.unbound_async_call client _program "send_message" (_of_System'V1'send_message'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'send_message'res (g())))
      
    
    let log client arg =
      _to_System'V1'log'res (U'C.unbound_sync_call client _program "log" (_of_System'V1'log'arg arg))
    
    let log'async client arg pass_reply =
      U'C.unbound_async_call client _program "log" (_of_System'V1'log'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'log'res (g())))
      
    
    let call_plugin client arg =
      _to_System'V1'call_plugin'res (U'C.unbound_sync_call client _program "call_plugin" (_of_System'V1'call_plugin'arg arg))
    
    let call_plugin'async client arg pass_reply =
      U'C.unbound_async_call client _program "call_plugin" (_of_System'V1'call_plugin'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'call_plugin'res (g())))
      
    
    let register_container_socket client arg =
      _to_System'V1'register_container_socket'res (U'C.unbound_sync_call client _program "register_container_socket" (_of_System'V1'register_container_socket'arg arg))
    
    let register_container_socket'async client arg pass_reply =
      U'C.unbound_async_call client _program "register_container_socket" (_of_System'V1'register_container_socket'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'register_container_socket'res (g())))
      
    
    let lookup_container_sockets client arg =
      _to_System'V1'lookup_container_sockets'res (U'C.unbound_sync_call client _program "lookup_container_sockets" (_of_System'V1'lookup_container_sockets'arg arg))
    
    let lookup_container_sockets'async client arg pass_reply =
      U'C.unbound_async_call client _program "lookup_container_sockets" (_of_System'V1'lookup_container_sockets'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'lookup_container_sockets'res (g())))
      
    
    let activate_lever client arg =
      _to_System'V1'activate_lever'res (U'C.unbound_sync_call client _program "activate_lever" (_of_System'V1'activate_lever'arg arg))
    
    let activate_lever'async client arg pass_reply =
      U'C.unbound_async_call client _program "activate_lever" (_of_System'V1'activate_lever'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'activate_lever'res (g())))
      
    
    
  end
  
end

module System = struct
  module V1 = struct
    module M'0 = Make'System(Rpc_client)
    include M'0.V1
    open Netplex_ctrl_aux
    let _program = program_System'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
  end
  
end

module Make'Admin(U'C:Rpc_client.USE_CLIENT) = struct
  module V2 = struct
    open Netplex_ctrl_aux
    let _program = program_Admin'V2
    type t = U'C.t
    
    let ping client arg =
      _to_Admin'V2'ping'res (U'C.unbound_sync_call client _program "ping" (_of_Admin'V2'ping'arg arg))
    
    let ping'async client arg pass_reply =
      U'C.unbound_async_call client _program "ping" (_of_Admin'V2'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'ping'res (g())))
      
    
    let list client arg =
      _to_Admin'V2'list'res (U'C.unbound_sync_call client _program "list" (_of_Admin'V2'list'arg arg))
    
    let list'async client arg pass_reply =
      U'C.unbound_async_call client _program "list" (_of_Admin'V2'list'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'list'res (g())))
      
    
    let enable client arg =
      _to_Admin'V2'enable'res (U'C.unbound_sync_call client _program "enable" (_of_Admin'V2'enable'arg arg))
    
    let enable'async client arg pass_reply =
      U'C.unbound_async_call client _program "enable" (_of_Admin'V2'enable'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'enable'res (g())))
      
    
    let disable client arg =
      _to_Admin'V2'disable'res (U'C.unbound_sync_call client _program "disable" (_of_Admin'V2'disable'arg arg))
    
    let disable'async client arg pass_reply =
      U'C.unbound_async_call client _program "disable" (_of_Admin'V2'disable'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'disable'res (g())))
      
    
    let restart client arg =
      _to_Admin'V2'restart'res (U'C.unbound_sync_call client _program "restart" (_of_Admin'V2'restart'arg arg))
    
    let restart'async client arg pass_reply =
      U'C.unbound_async_call client _program "restart" (_of_Admin'V2'restart'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'restart'res (g())))
      
    
    let restart_all client arg =
      _to_Admin'V2'restart_all'res (U'C.unbound_sync_call client _program "restart_all" (_of_Admin'V2'restart_all'arg arg))
    
    let restart_all'async client arg pass_reply =
      U'C.unbound_async_call client _program "restart_all" (_of_Admin'V2'restart_all'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'restart_all'res (g())))
      
    
    let system_shutdown client arg =
      _to_Admin'V2'system_shutdown'res (U'C.unbound_sync_call client _program "system_shutdown" (_of_Admin'V2'system_shutdown'arg arg))
    
    let system_shutdown'async client arg pass_reply =
      U'C.unbound_async_call client _program "system_shutdown" (_of_Admin'V2'system_shutdown'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'system_shutdown'res (g())))
      
    
    let reopen_logfiles client arg =
      _to_Admin'V2'reopen_logfiles'res (U'C.unbound_sync_call client _program "reopen_logfiles" (_of_Admin'V2'reopen_logfiles'arg arg))
    
    let reopen_logfiles'async client arg pass_reply =
      U'C.unbound_async_call client _program "reopen_logfiles" (_of_Admin'V2'reopen_logfiles'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'reopen_logfiles'res (g())))
      
    
    let send_admin_message client arg =
      _to_Admin'V2'send_admin_message'res (U'C.unbound_sync_call client _program "send_admin_message" (_of_Admin'V2'send_admin_message'arg arg))
    
    let send_admin_message'async client arg pass_reply =
      U'C.unbound_async_call client _program "send_admin_message" (_of_Admin'V2'send_admin_message'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V2'send_admin_message'res (g())))
      
    
    
  end
  
end

module Admin = struct
  module V2 = struct
    module M'0 = Make'Admin(Rpc_client)
    include M'0.V2
    open Netplex_ctrl_aux
    let _program = program_Admin'V2
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
  end
  
end

module Make'Semaphore(U'C:Rpc_client.USE_CLIENT) = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Semaphore'V1
    type t = U'C.t
    
    let ping client arg =
      _to_Semaphore'V1'ping'res (U'C.unbound_sync_call client _program "ping" (_of_Semaphore'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      U'C.unbound_async_call client _program "ping" (_of_Semaphore'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_Semaphore'V1'ping'res (g())))
      
    
    let increment client arg =
      _to_Semaphore'V1'increment'res (U'C.unbound_sync_call client _program "increment" (_of_Semaphore'V1'increment'arg arg))
    
    let increment'async client arg pass_reply =
      U'C.unbound_async_call client _program "increment" (_of_Semaphore'V1'increment'arg arg)
        (fun g -> pass_reply (fun () -> _to_Semaphore'V1'increment'res (g())))
      
    
    let decrement client arg =
      _to_Semaphore'V1'decrement'res (U'C.unbound_sync_call client _program "decrement" (_of_Semaphore'V1'decrement'arg arg))
    
    let decrement'async client arg pass_reply =
      U'C.unbound_async_call client _program "decrement" (_of_Semaphore'V1'decrement'arg arg)
        (fun g -> pass_reply (fun () -> _to_Semaphore'V1'decrement'res (g())))
      
    
    let get client arg =
      _to_Semaphore'V1'get'res (U'C.unbound_sync_call client _program "get" (_of_Semaphore'V1'get'arg arg))
    
    let get'async client arg pass_reply =
      U'C.unbound_async_call client _program "get" (_of_Semaphore'V1'get'arg arg)
        (fun g -> pass_reply (fun () -> _to_Semaphore'V1'get'res (g())))
      
    
    let create client arg =
      _to_Semaphore'V1'create'res (U'C.unbound_sync_call client _program "create" (_of_Semaphore'V1'create'arg arg))
    
    let create'async client arg pass_reply =
      U'C.unbound_async_call client _program "create" (_of_Semaphore'V1'create'arg arg)
        (fun g -> pass_reply (fun () -> _to_Semaphore'V1'create'res (g())))
      
    
    let destroy client arg =
      _to_Semaphore'V1'destroy'res (U'C.unbound_sync_call client _program "destroy" (_of_Semaphore'V1'destroy'arg arg))
    
    let destroy'async client arg pass_reply =
      U'C.unbound_async_call client _program "destroy" (_of_Semaphore'V1'destroy'arg arg)
        (fun g -> pass_reply (fun () -> _to_Semaphore'V1'destroy'res (g())))
      
    
    
  end
  
end

module Semaphore = struct
  module V1 = struct
    module M'0 = Make'Semaphore(Rpc_client)
    include M'0.V1
    open Netplex_ctrl_aux
    let _program = program_Semaphore'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
  end
  
end

module Make'Sharedvar(U'C:Rpc_client.USE_CLIENT) = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Sharedvar'V1
    type t = U'C.t
    
    let ping client arg =
      _to_Sharedvar'V1'ping'res (U'C.unbound_sync_call client _program "ping" (_of_Sharedvar'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      U'C.unbound_async_call client _program "ping" (_of_Sharedvar'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'ping'res (g())))
      
    
    let create_var client arg =
      _to_Sharedvar'V1'create_var'res (U'C.unbound_sync_call client _program "create_var" (_of_Sharedvar'V1'create_var'arg arg))
    
    let create_var'async client arg pass_reply =
      U'C.unbound_async_call client _program "create_var" (_of_Sharedvar'V1'create_var'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'create_var'res (g())))
      
    
    let set_value client arg =
      _to_Sharedvar'V1'set_value'res (U'C.unbound_sync_call client _program "set_value" (_of_Sharedvar'V1'set_value'arg arg))
    
    let set_value'async client arg pass_reply =
      U'C.unbound_async_call client _program "set_value" (_of_Sharedvar'V1'set_value'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'set_value'res (g())))
      
    
    let get_value client arg =
      _to_Sharedvar'V1'get_value'res (U'C.unbound_sync_call client _program "get_value" (_of_Sharedvar'V1'get_value'arg arg))
    
    let get_value'async client arg pass_reply =
      U'C.unbound_async_call client _program "get_value" (_of_Sharedvar'V1'get_value'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'get_value'res (g())))
      
    
    let delete_var client arg =
      _to_Sharedvar'V1'delete_var'res (U'C.unbound_sync_call client _program "delete_var" (_of_Sharedvar'V1'delete_var'arg arg))
    
    let delete_var'async client arg pass_reply =
      U'C.unbound_async_call client _program "delete_var" (_of_Sharedvar'V1'delete_var'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'delete_var'res (g())))
      
    
    let wait_for_value client arg =
      _to_Sharedvar'V1'wait_for_value'res (U'C.unbound_sync_call client _program "wait_for_value" (_of_Sharedvar'V1'wait_for_value'arg arg))
    
    let wait_for_value'async client arg pass_reply =
      U'C.unbound_async_call client _program "wait_for_value" (_of_Sharedvar'V1'wait_for_value'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'wait_for_value'res (g())))
      
    
    let dump client arg =
      _to_Sharedvar'V1'dump'res (U'C.unbound_sync_call client _program "dump" (_of_Sharedvar'V1'dump'arg arg))
    
    let dump'async client arg pass_reply =
      U'C.unbound_async_call client _program "dump" (_of_Sharedvar'V1'dump'arg arg)
        (fun g -> pass_reply (fun () -> _to_Sharedvar'V1'dump'res (g())))
      
    
    
  end
  
end

module Sharedvar = struct
  module V1 = struct
    module M'0 = Make'Sharedvar(Rpc_client)
    include M'0.V1
    open Netplex_ctrl_aux
    let _program = program_Sharedvar'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
  end
  
end


