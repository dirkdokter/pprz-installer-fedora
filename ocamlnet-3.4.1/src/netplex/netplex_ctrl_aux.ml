(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * netplex_ctrl.x
 *
 ************************************************************)
type longstring = 
      string
and longstring_opt = 
      longstring option
and internal_port = 
      longstring option
and internal_ports = 
      longstring array
and message = 
      { 
        mutable msg_name : longstring;
        mutable msg_arguments : longstring array;
      }
and socket_id = 
      { 
        mutable sock_protocol : longstring;
        mutable sock_index : int;
      }
and socket_id_list = 
      socket_id array
and event_type = 
      Rtypes.int4
and event = 
      [ 
      | `event_none 
      | `event_accept 
      | `event_noaccept 
      | `event_received_message of (message) 
      | `event_received_admin_message of (message) 
      | `event_shutdown 
      | `event_system_shutdown 
      ]
and level = 
      Rtypes.int4
and t_Control'V1'ping'arg = 
      unit
and t_Control'V1'ping'res = 
      unit
and t_Control'V1'poll'arg = 
      ( int * bool )
and t_Control'V1'poll'res = 
      event
and t_Control'V1'accepted'arg = 
      unit
and t_Control'V1'accepted'res = 
      unit
and t_System'V1'ping'arg = 
      unit
and t_System'V1'ping'res = 
      unit
and t_System'V1'lookup'arg = 
      ( longstring * longstring )
and t_System'V1'lookup'res = 
      internal_port
and t_System'V1'send_message'arg = 
      ( longstring * message )
and t_System'V1'send_message'res = 
      unit
and t_System'V1'log'arg = 
      ( level * longstring * longstring )
and t_System'V1'log'res = 
      unit
and t_System'V1'call_plugin'arg = 
      ( int64 * longstring * longstring )
and t_System'V1'call_plugin'res = 
      longstring
and t_System'V1'register_container_socket'arg = 
      ( longstring * longstring * longstring )
and t_System'V1'register_container_socket'res = 
      unit
and t_System'V1'lookup_container_sockets'arg = 
      ( longstring * longstring )
and t_System'V1'lookup_container_sockets'res = 
      internal_ports
and t_System'V1'activate_lever'arg = 
      ( int * longstring )
and t_System'V1'activate_lever'res = 
      longstring
and result_code = 
      Rtypes.int4
and unit_result = 
      [ | `code_ok | `code_error of (longstring) ]
and socket_domain = 
      Rtypes.int4
and port = 
      [ 
      | `pf_unknown 
      | `pf_unix of (longstring) 
      | `pf_inet of (_t0) 
      | `pf_inet6 of (_t1) 
      ]
and port_list = 
      port array
and prot = 
      { 
        mutable prot_name : longstring;
        mutable prot_ports : port_list;
      }
and prot_list = 
      prot array
and srv_state = 
      Rtypes.int4
and cnt_state_enum = 
      Rtypes.int4
and cnt_state = 
      [ 
      | `cstate_accepting 
      | `cstate_selected 
      | `cstate_busy 
      | `cstate_starting 
      | `cstate_shutdown 
      ]
and container_info = 
      { 
        mutable cnt_id : int64;
        mutable cnt_sys_id : longstring;
        mutable cnt_state : cnt_state;
      }
and service_info = 
      { 
        mutable srv_name : longstring;
        mutable srv_protocols : prot_list;
        mutable srv_nr_containers : int;
        mutable srv_containers : container_info array;
        mutable srv_state : srv_state;
      }
and service_info_list = 
      service_info array
and t_Admin'V2'ping'arg = 
      unit
and t_Admin'V2'ping'res = 
      unit
and t_Admin'V2'list'arg = 
      unit
and t_Admin'V2'list'res = 
      service_info_list
and t_Admin'V2'enable'arg = 
      longstring
and t_Admin'V2'enable'res = 
      unit_result
and t_Admin'V2'disable'arg = 
      longstring
and t_Admin'V2'disable'res = 
      unit_result
and t_Admin'V2'restart'arg = 
      longstring
and t_Admin'V2'restart'res = 
      unit_result
and t_Admin'V2'restart_all'arg = 
      unit
and t_Admin'V2'restart_all'res = 
      unit_result
and t_Admin'V2'system_shutdown'arg = 
      unit
and t_Admin'V2'system_shutdown'res = 
      unit_result
and t_Admin'V2'reopen_logfiles'arg = 
      unit
and t_Admin'V2'reopen_logfiles'res = 
      unit_result
and t_Admin'V2'send_admin_message'arg = 
      ( longstring * message )
and t_Admin'V2'send_admin_message'res = 
      unit
and t_Semaphore'V1'ping'arg = 
      unit
and t_Semaphore'V1'ping'res = 
      unit
and t_Semaphore'V1'increment'arg = 
      longstring
and t_Semaphore'V1'increment'res = 
      int64
and t_Semaphore'V1'decrement'arg = 
      ( longstring * bool )
and t_Semaphore'V1'decrement'res = 
      int64
and t_Semaphore'V1'get'arg = 
      longstring
and t_Semaphore'V1'get'res = 
      int64
and t_Semaphore'V1'create'arg = 
      ( longstring * int64 * bool )
and t_Semaphore'V1'create'res = 
      bool
and t_Semaphore'V1'destroy'arg = 
      longstring
and t_Semaphore'V1'destroy'res = 
      unit
and shvar_enum = 
      Rtypes.int4
and shvar_code = 
      [ 
      | `shvar_ok 
      | `shvar_badtype 
      | `shvar_notfound 
      | `shvar_exists 
      | `shvar_noperm 
      ]
and shvar_get = 
      [ 
      | `shvar_ok of (longstring) 
      | `shvar_badtype 
      | `shvar_notfound 
      | `shvar_exists 
      | `shvar_noperm 
      ]
and t_Sharedvar'V1'ping'arg = 
      unit
and t_Sharedvar'V1'ping'res = 
      unit
and t_Sharedvar'V1'create_var'arg = 
      ( longstring * bool * bool * longstring )
and t_Sharedvar'V1'create_var'res = 
      shvar_code
and t_Sharedvar'V1'set_value'arg = 
      ( longstring * longstring * longstring )
and t_Sharedvar'V1'set_value'res = 
      shvar_code
and t_Sharedvar'V1'get_value'arg = 
      ( longstring * longstring )
and t_Sharedvar'V1'get_value'res = 
      shvar_get
and t_Sharedvar'V1'delete_var'arg = 
      longstring
and t_Sharedvar'V1'delete_var'res = 
      shvar_code
and t_Sharedvar'V1'wait_for_value'arg = 
      ( longstring * longstring )
and t_Sharedvar'V1'wait_for_value'res = 
      shvar_get
and t_Sharedvar'V1'dump'arg = 
      ( longstring * longstring )
and t_Sharedvar'V1'dump'res = 
      unit
and _t0 = 
      { 
        mutable inet_addr : longstring;
        mutable inet_port : int;
      }
and _t1 = 
      { 
        mutable inet6_addr : longstring;
        mutable inet6_port : int;
      }
;;
let event_none = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let event_accept = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let event_noaccept = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let event_received_message = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let event_received_admin_message = (Rtypes.mk_int4('\000','\000','\000','\004'));;
let event_shutdown = (Rtypes.mk_int4('\000','\000','\000','\005'));;
let event_system_shutdown = (Rtypes.mk_int4('\000','\000','\000','\006'));;
let log_emerg = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let log_alert = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let log_crit = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let log_err = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let log_warning = (Rtypes.mk_int4('\000','\000','\000','\004'));;
let log_notice = (Rtypes.mk_int4('\000','\000','\000','\005'));;
let log_info = (Rtypes.mk_int4('\000','\000','\000','\006'));;
let log_debug = (Rtypes.mk_int4('\000','\000','\000','\007'));;
let code_ok = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let code_error = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let pf_unknown = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let pf_unix = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let pf_inet = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let pf_inet6 = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let state_enabled = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let state_disabled = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let state_restarting = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let state_down = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let cstate_accepting = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let cstate_selected = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let cstate_busy = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let cstate_starting = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let cstate_shutdown = (Rtypes.mk_int4('\000','\000','\000','\004'));;
let shvar_ok = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let shvar_badtype = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let shvar_notfound = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let shvar_exists = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let shvar_noperm = (Rtypes.mk_int4('\000','\000','\000','\004'));;
let rec _to_longstring (x:Xdr.xdr_value) : longstring =
  (Xdr.dest_xv_string x)
and _of_longstring (x:longstring) : Xdr.xdr_value = (Xdr.XV_string x)
and _to_longstring_opt (x:Xdr.xdr_value) : longstring_opt =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, _) -> None
  | (1, x) -> Some (_to_longstring x)
  | _ -> assert false)
and _of_longstring_opt (x:longstring_opt) : Xdr.xdr_value =
  (match x with
  | None   -> Xdr.xv_none
  | Some x -> Xdr.xv_some (_of_longstring x)
  )
and _to_internal_port (x:Xdr.xdr_value) : internal_port =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, _) -> None
  | (1, x) -> Some (_to_longstring x)
  | _ -> assert false)
and _of_internal_port (x:internal_port) : Xdr.xdr_value =
  (match x with
  | None   -> Xdr.xv_none
  | Some x -> Xdr.xv_some (_of_longstring x)
  )
and _to_internal_ports (x:Xdr.xdr_value) : internal_ports =
  (match x with
  | Xdr.XV_array x ->
      Array.map
        (fun x -> (_to_longstring x))
        x
  | Xdr.XV_array_of_string_fast x ->
      x
  | _ -> raise Xdr.Dest_failure
  )
and _of_internal_ports (x:internal_ports) : Xdr.xdr_value =
  (Xdr.XV_array_of_string_fast x)
and _to_message (x:Xdr.xdr_value) : message =
  (let s = Xdr.dest_xv_struct_fast x in
     { msg_name = (fun x -> (_to_longstring x)) s.(0); 
       msg_arguments = (fun x -> (match x with
                                 | Xdr.XV_array x ->
                                     Array.map
                                       (fun x -> (_to_longstring x))
                                       x
                                 | Xdr.XV_array_of_string_fast x ->
                                     x
                                 | _ -> raise Xdr.Dest_failure
                                 ))
                       s.(1); 
     })
and _of_message (x:message) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.msg_name in (_of_longstring x));
       (let x = x.msg_arguments in (Xdr.XV_array_of_string_fast x));
     |])
and _to_socket_id (x:Xdr.xdr_value) : socket_id =
  (let s = Xdr.dest_xv_struct_fast x in
     { sock_protocol = (fun x -> (_to_longstring x)) s.(0); 
       sock_index = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x))) s.(1); 
     })
and _of_socket_id (x:socket_id) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.sock_protocol in (_of_longstring x));
       (let x = x.sock_index in (Xdr.XV_int (Rtypes.int4_of_int x)));
     |])
and _to_socket_id_list (x:Xdr.xdr_value) : socket_id_list =
  (Array.map (fun x -> (_to_socket_id x)) (Xdr.dest_xv_array x))
and _of_socket_id_list (x:socket_id_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_socket_id x)) x)
and _to_event_type (x:Xdr.xdr_value) : event_type =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | 4 -> (Rtypes.mk_int4('\000','\000','\000','\004'))
  | 5 -> (Rtypes.mk_int4('\000','\000','\000','\005'))
  | 6 -> (Rtypes.mk_int4('\000','\000','\000','\006'))
  | _ -> assert false
  )
and _of_event_type (x:event_type) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | ('\000','\000','\000','\004') -> Xdr.XV_enum_fast 4
  | ('\000','\000','\000','\005') -> Xdr.XV_enum_fast 5
  | ('\000','\000','\000','\006') -> Xdr.XV_enum_fast 6
  | _ -> failwith "RPC/XDR error: invalid enum value for type `event_type'"
  )
and _to_event (x:Xdr.xdr_value) : event =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `event_none 
  | (1, x) -> `event_accept 
  | (2, x) -> `event_noaccept 
  | (3, x) -> `event_received_message (_to_message x)
  | (4, x) -> `event_received_admin_message (_to_message x)
  | (5, x) -> `event_shutdown 
  | (6, x) -> `event_system_shutdown 
  | _ -> assert false
  :> [
     | `event_none
     | `event_accept
     | `event_noaccept
     | `event_received_message of _
     | `event_received_admin_message of _
     | `event_shutdown
     | `event_system_shutdown
     ]
  )
and _of_event (x:event) : Xdr.xdr_value =
  (match x with
  | `event_none -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `event_accept -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `event_noaccept -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void)
  | `event_received_message x ->
        Xdr.XV_union_over_enum_fast(3, (_of_message x))
  | `event_received_admin_message x ->
        Xdr.XV_union_over_enum_fast(4, (_of_message x))
  | `event_shutdown -> Xdr.XV_union_over_enum_fast(5, Xdr.XV_void)
  | `event_system_shutdown -> Xdr.XV_union_over_enum_fast(6, Xdr.XV_void))
and _to_level (x:Xdr.xdr_value) : level =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | 4 -> (Rtypes.mk_int4('\000','\000','\000','\004'))
  | 5 -> (Rtypes.mk_int4('\000','\000','\000','\005'))
  | 6 -> (Rtypes.mk_int4('\000','\000','\000','\006'))
  | 7 -> (Rtypes.mk_int4('\000','\000','\000','\007'))
  | _ -> assert false
  )
and _of_level (x:level) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | ('\000','\000','\000','\004') -> Xdr.XV_enum_fast 4
  | ('\000','\000','\000','\005') -> Xdr.XV_enum_fast 5
  | ('\000','\000','\000','\006') -> Xdr.XV_enum_fast 6
  | ('\000','\000','\000','\007') -> Xdr.XV_enum_fast 7
  | _ -> failwith "RPC/XDR error: invalid enum value for type `level'"
  )
and _to_Control'V1'ping'arg (x:Xdr.xdr_value) : t_Control'V1'ping'arg = ()
and _of_Control'V1'ping'arg (x:t_Control'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Control'V1'ping'res (x:Xdr.xdr_value) : t_Control'V1'ping'res = ()
and _of_Control'V1'ping'res (x:t_Control'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Control'V1'poll'arg (x:Xdr.xdr_value) : t_Control'V1'poll'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x))) s.(0), 
       (fun x -> (Xdr.dest_xv_enum_fast x = 1)) s.(1)
     ))
and _of_Control'V1'poll'arg (x:t_Control'V1'poll'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast
     [|
       ((Xdr.XV_int (Rtypes.int4_of_int x0)));
       ((if x1 then Xdr.xv_true else Xdr.xv_false));
     |]
   )
and _to_Control'V1'poll'res (x:Xdr.xdr_value) : t_Control'V1'poll'res =
  (_to_event x)
and _of_Control'V1'poll'res (x:t_Control'V1'poll'res) : Xdr.xdr_value =
  (_of_event x)
and _to_Control'V1'accepted'arg (x:Xdr.xdr_value) : t_Control'V1'accepted'arg =
  ()
and _of_Control'V1'accepted'arg (x:t_Control'V1'accepted'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Control'V1'accepted'res (x:Xdr.xdr_value) : t_Control'V1'accepted'res =
  ()
and _of_Control'V1'accepted'res (x:t_Control'V1'accepted'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'ping'arg (x:Xdr.xdr_value) : t_System'V1'ping'arg = ()
and _of_System'V1'ping'arg (x:t_System'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'ping'res (x:Xdr.xdr_value) : t_System'V1'ping'res = ()
and _of_System'V1'ping'res (x:t_System'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'lookup'arg (x:Xdr.xdr_value) : t_System'V1'lookup'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_System'V1'lookup'arg (x:t_System'V1'lookup'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_longstring x1)); |]
   )
and _to_System'V1'lookup'res (x:Xdr.xdr_value) : t_System'V1'lookup'res =
  (_to_internal_port x)
and _of_System'V1'lookup'res (x:t_System'V1'lookup'res) : Xdr.xdr_value =
  (_of_internal_port x)
and _to_System'V1'send_message'arg (x:Xdr.xdr_value) : t_System'V1'send_message'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), (fun x -> (_to_message x)) s.(1)
     ))
and _of_System'V1'send_message'arg (x:t_System'V1'send_message'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_message x1)); |]
   )
and _to_System'V1'send_message'res (x:Xdr.xdr_value) : t_System'V1'send_message'res =
  ()
and _of_System'V1'send_message'res (x:t_System'V1'send_message'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'log'arg (x:Xdr.xdr_value) : t_System'V1'log'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_level x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1), 
       (fun x -> (_to_longstring x)) s.(2)
     ))
and _of_System'V1'log'arg (x:t_System'V1'log'arg) : Xdr.xdr_value =
  (let (x0, x1, x2) = x in
   Xdr.XV_struct_fast
     [|
       ((_of_level x0));
       ((_of_longstring x1));
       ((_of_longstring x2));
     |]
   )
and _to_System'V1'log'res (x:Xdr.xdr_value) : t_System'V1'log'res = ()
and _of_System'V1'log'res (x:t_System'V1'log'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'call_plugin'arg (x:Xdr.xdr_value) : t_System'V1'call_plugin'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (Rtypes.int64_of_int8 (Xdr.dest_xv_hyper x))) s.(0), 
       (fun x -> (_to_longstring x)) s.(1), 
       (fun x -> (_to_longstring x)) s.(2)
     ))
and _of_System'V1'call_plugin'arg (x:t_System'V1'call_plugin'arg) : Xdr.xdr_value =
  (let (x0, x1, x2) = x in
   Xdr.XV_struct_fast
     [|
       ((Xdr.XV_hyper (Rtypes.int8_of_int64 x0)));
       ((_of_longstring x1));
       ((_of_longstring x2));
     |]
   )
and _to_System'V1'call_plugin'res (x:Xdr.xdr_value) : t_System'V1'call_plugin'res =
  (_to_longstring x)
and _of_System'V1'call_plugin'res (x:t_System'V1'call_plugin'res) : Xdr.xdr_value =
  (_of_longstring x)
and _to_System'V1'register_container_socket'arg (x:Xdr.xdr_value) : t_System'V1'register_container_socket'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1), 
       (fun x -> (_to_longstring x)) s.(2)
     ))
and _of_System'V1'register_container_socket'arg (x:t_System'V1'register_container_socket'arg) : Xdr.xdr_value =
  (let (x0, x1, x2) = x in
   Xdr.XV_struct_fast
     [|
       ((_of_longstring x0));
       ((_of_longstring x1));
       ((_of_longstring x2));
     |]
   )
and _to_System'V1'register_container_socket'res (x:Xdr.xdr_value) : t_System'V1'register_container_socket'res =
  ()
and _of_System'V1'register_container_socket'res (x:t_System'V1'register_container_socket'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'lookup_container_sockets'arg (x:Xdr.xdr_value) : t_System'V1'lookup_container_sockets'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_System'V1'lookup_container_sockets'arg (x:t_System'V1'lookup_container_sockets'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_longstring x1)); |]
   )
and _to_System'V1'lookup_container_sockets'res (x:Xdr.xdr_value) : t_System'V1'lookup_container_sockets'res =
  (_to_internal_ports x)
and _of_System'V1'lookup_container_sockets'res (x:t_System'V1'lookup_container_sockets'res) : Xdr.xdr_value =
  (_of_internal_ports x)
and _to_System'V1'activate_lever'arg (x:Xdr.xdr_value) : t_System'V1'activate_lever'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x))) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_System'V1'activate_lever'arg (x:t_System'V1'activate_lever'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast
     [|
       ((Xdr.XV_int (Rtypes.int4_of_int x0)));
       ((_of_longstring x1));
     |]
   )
and _to_System'V1'activate_lever'res (x:Xdr.xdr_value) : t_System'V1'activate_lever'res =
  (_to_longstring x)
and _of_System'V1'activate_lever'res (x:t_System'V1'activate_lever'res) : Xdr.xdr_value =
  (_of_longstring x)
and _to_result_code (x:Xdr.xdr_value) : result_code =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | _ -> assert false
  )
and _of_result_code (x:result_code) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | _ -> failwith "RPC/XDR error: invalid enum value for type `result_code'"
  )
and _to_unit_result (x:Xdr.xdr_value) : unit_result =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `code_ok 
  | (1, x) -> `code_error (_to_longstring x)
  | _ -> assert false
  :> [ | `code_ok | `code_error of _ ]
  )
and _of_unit_result (x:unit_result) : Xdr.xdr_value =
  (match x with
  | `code_ok -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `code_error x -> Xdr.XV_union_over_enum_fast(1, (_of_longstring x)))
and _to_socket_domain (x:Xdr.xdr_value) : socket_domain =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | _ -> assert false
  )
and _of_socket_domain (x:socket_domain) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | _ -> failwith "RPC/XDR error: invalid enum value for type `socket_domain'"
  )
and _to_port (x:Xdr.xdr_value) : port =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `pf_unknown 
  | (1, x) -> `pf_unix (_to_longstring x)
  | (2, x) ->
        `pf_inet (let s = Xdr.dest_xv_struct_fast x in
                    { inet_addr = (fun x -> (_to_longstring x)) s.(0); 
                      inet_port = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x)))
                                  s.(1); 
                    })
  | (3, x) ->
        `pf_inet6 (let s = Xdr.dest_xv_struct_fast x in
                     { inet6_addr = (fun x -> (_to_longstring x)) s.(0); 
                       inet6_port = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x)))
                                    s.(1); 
                     })
  | _ -> assert false
  :> [ | `pf_unknown | `pf_unix of _ | `pf_inet of _ | `pf_inet6 of _ ]
  )
and _of_port (x:port) : Xdr.xdr_value =
  (match x with
  | `pf_unknown -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `pf_unix x -> Xdr.XV_union_over_enum_fast(1, (_of_longstring x))
  | `pf_inet x ->
        Xdr.XV_union_over_enum_fast(2,
          (Xdr.XV_struct_fast
             [|
               (let x = x.inet_addr in (_of_longstring x));
               (let x = x.inet_port in (Xdr.XV_int (Rtypes.int4_of_int x)));
             |]))
  | `pf_inet6 x ->
        Xdr.XV_union_over_enum_fast(3,
          (Xdr.XV_struct_fast
             [|
               (let x = x.inet6_addr in (_of_longstring x));
               (let x = x.inet6_port in (Xdr.XV_int (Rtypes.int4_of_int x)));
             |])))
and _to_port_list (x:Xdr.xdr_value) : port_list =
  (Array.map (fun x -> (_to_port x)) (Xdr.dest_xv_array x))
and _of_port_list (x:port_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_port x)) x)
and _to_prot (x:Xdr.xdr_value) : prot =
  (let s = Xdr.dest_xv_struct_fast x in
     { prot_name = (fun x -> (_to_longstring x)) s.(0); 
       prot_ports = (fun x -> (_to_port_list x)) s.(1); 
     })
and _of_prot (x:prot) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.prot_name in (_of_longstring x));
       (let x = x.prot_ports in (_of_port_list x));
     |])
and _to_prot_list (x:Xdr.xdr_value) : prot_list =
  (Array.map (fun x -> (_to_prot x)) (Xdr.dest_xv_array x))
and _of_prot_list (x:prot_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_prot x)) x)
and _to_srv_state (x:Xdr.xdr_value) : srv_state =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | _ -> assert false
  )
and _of_srv_state (x:srv_state) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | _ -> failwith "RPC/XDR error: invalid enum value for type `srv_state'"
  )
and _to_cnt_state_enum (x:Xdr.xdr_value) : cnt_state_enum =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | 4 -> (Rtypes.mk_int4('\000','\000','\000','\004'))
  | _ -> assert false
  )
and _of_cnt_state_enum (x:cnt_state_enum) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | ('\000','\000','\000','\004') -> Xdr.XV_enum_fast 4
  | _ -> failwith "RPC/XDR error: invalid enum value for type `cnt_state_enum'"
  )
and _to_cnt_state (x:Xdr.xdr_value) : cnt_state =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `cstate_accepting 
  | (1, x) -> `cstate_selected 
  | (2, x) -> `cstate_busy 
  | (3, x) -> `cstate_starting 
  | (4, x) -> `cstate_shutdown 
  | _ -> assert false
  :> [
     | `cstate_accepting
     | `cstate_selected
     | `cstate_busy
     | `cstate_starting
     | `cstate_shutdown
     ]
  )
and _of_cnt_state (x:cnt_state) : Xdr.xdr_value =
  (match x with
  | `cstate_accepting -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `cstate_selected -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `cstate_busy -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void)
  | `cstate_starting -> Xdr.XV_union_over_enum_fast(3, Xdr.XV_void)
  | `cstate_shutdown -> Xdr.XV_union_over_enum_fast(4, Xdr.XV_void))
and _to_container_info (x:Xdr.xdr_value) : container_info =
  (let s = Xdr.dest_xv_struct_fast x in
     { cnt_id = (fun x -> (Rtypes.int64_of_int8 (Xdr.dest_xv_hyper x))) s.(0); 
       cnt_sys_id = (fun x -> (_to_longstring x)) s.(1); 
       cnt_state = (fun x -> (_to_cnt_state x)) s.(2); 
     })
and _of_container_info (x:container_info) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.cnt_id in (Xdr.XV_hyper (Rtypes.int8_of_int64 x)));
       (let x = x.cnt_sys_id in (_of_longstring x));
       (let x = x.cnt_state in (_of_cnt_state x));
     |])
and _to_service_info (x:Xdr.xdr_value) : service_info =
  (let s = Xdr.dest_xv_struct_fast x in
     { srv_name = (fun x -> (_to_longstring x)) s.(0); 
       srv_protocols = (fun x -> (_to_prot_list x)) s.(1); 
       srv_nr_containers = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x)))
                           s.(2); 
       srv_containers = (fun x -> (Array.map
                                    (fun x -> (_to_container_info x))
                                  (Xdr.dest_xv_array x)))
                        s.(3); 
       srv_state = (fun x -> (_to_srv_state x)) s.(4); 
     })
and _of_service_info (x:service_info) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.srv_name in (_of_longstring x));
       (let x = x.srv_protocols in (_of_prot_list x));
       (let x = x.srv_nr_containers in (Xdr.XV_int (Rtypes.int4_of_int x)));
       (let x = x.srv_containers in
         Xdr.XV_array (Array.map (fun x -> (_of_container_info x)) x));
       (let x = x.srv_state in (_of_srv_state x));
     |])
and _to_service_info_list (x:Xdr.xdr_value) : service_info_list =
  (Array.map (fun x -> (_to_service_info x)) (Xdr.dest_xv_array x))
and _of_service_info_list (x:service_info_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_service_info x)) x)
and _to_Admin'V2'ping'arg (x:Xdr.xdr_value) : t_Admin'V2'ping'arg = ()
and _of_Admin'V2'ping'arg (x:t_Admin'V2'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V2'ping'res (x:Xdr.xdr_value) : t_Admin'V2'ping'res = ()
and _of_Admin'V2'ping'res (x:t_Admin'V2'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V2'list'arg (x:Xdr.xdr_value) : t_Admin'V2'list'arg = ()
and _of_Admin'V2'list'arg (x:t_Admin'V2'list'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V2'list'res (x:Xdr.xdr_value) : t_Admin'V2'list'res =
  (_to_service_info_list x)
and _of_Admin'V2'list'res (x:t_Admin'V2'list'res) : Xdr.xdr_value =
  (_of_service_info_list x)
and _to_Admin'V2'enable'arg (x:Xdr.xdr_value) : t_Admin'V2'enable'arg =
  (_to_longstring x)
and _of_Admin'V2'enable'arg (x:t_Admin'V2'enable'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Admin'V2'enable'res (x:Xdr.xdr_value) : t_Admin'V2'enable'res =
  (_to_unit_result x)
and _of_Admin'V2'enable'res (x:t_Admin'V2'enable'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V2'disable'arg (x:Xdr.xdr_value) : t_Admin'V2'disable'arg =
  (_to_longstring x)
and _of_Admin'V2'disable'arg (x:t_Admin'V2'disable'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Admin'V2'disable'res (x:Xdr.xdr_value) : t_Admin'V2'disable'res =
  (_to_unit_result x)
and _of_Admin'V2'disable'res (x:t_Admin'V2'disable'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V2'restart'arg (x:Xdr.xdr_value) : t_Admin'V2'restart'arg =
  (_to_longstring x)
and _of_Admin'V2'restart'arg (x:t_Admin'V2'restart'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Admin'V2'restart'res (x:Xdr.xdr_value) : t_Admin'V2'restart'res =
  (_to_unit_result x)
and _of_Admin'V2'restart'res (x:t_Admin'V2'restart'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V2'restart_all'arg (x:Xdr.xdr_value) : t_Admin'V2'restart_all'arg =
  ()
and _of_Admin'V2'restart_all'arg (x:t_Admin'V2'restart_all'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V2'restart_all'res (x:Xdr.xdr_value) : t_Admin'V2'restart_all'res =
  (_to_unit_result x)
and _of_Admin'V2'restart_all'res (x:t_Admin'V2'restart_all'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V2'system_shutdown'arg (x:Xdr.xdr_value) : t_Admin'V2'system_shutdown'arg =
  ()
and _of_Admin'V2'system_shutdown'arg (x:t_Admin'V2'system_shutdown'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V2'system_shutdown'res (x:Xdr.xdr_value) : t_Admin'V2'system_shutdown'res =
  (_to_unit_result x)
and _of_Admin'V2'system_shutdown'res (x:t_Admin'V2'system_shutdown'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V2'reopen_logfiles'arg (x:Xdr.xdr_value) : t_Admin'V2'reopen_logfiles'arg =
  ()
and _of_Admin'V2'reopen_logfiles'arg (x:t_Admin'V2'reopen_logfiles'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V2'reopen_logfiles'res (x:Xdr.xdr_value) : t_Admin'V2'reopen_logfiles'res =
  (_to_unit_result x)
and _of_Admin'V2'reopen_logfiles'res (x:t_Admin'V2'reopen_logfiles'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V2'send_admin_message'arg (x:Xdr.xdr_value) : t_Admin'V2'send_admin_message'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), (fun x -> (_to_message x)) s.(1)
     ))
and _of_Admin'V2'send_admin_message'arg (x:t_Admin'V2'send_admin_message'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_message x1)); |]
   )
and _to_Admin'V2'send_admin_message'res (x:Xdr.xdr_value) : t_Admin'V2'send_admin_message'res =
  ()
and _of_Admin'V2'send_admin_message'res (x:t_Admin'V2'send_admin_message'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Semaphore'V1'ping'arg (x:Xdr.xdr_value) : t_Semaphore'V1'ping'arg =
  ()
and _of_Semaphore'V1'ping'arg (x:t_Semaphore'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Semaphore'V1'ping'res (x:Xdr.xdr_value) : t_Semaphore'V1'ping'res =
  ()
and _of_Semaphore'V1'ping'res (x:t_Semaphore'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Semaphore'V1'increment'arg (x:Xdr.xdr_value) : t_Semaphore'V1'increment'arg =
  (_to_longstring x)
and _of_Semaphore'V1'increment'arg (x:t_Semaphore'V1'increment'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Semaphore'V1'increment'res (x:Xdr.xdr_value) : t_Semaphore'V1'increment'res =
  (Rtypes.int64_of_int8 (Xdr.dest_xv_hyper x))
and _of_Semaphore'V1'increment'res (x:t_Semaphore'V1'increment'res) : Xdr.xdr_value =
  (Xdr.XV_hyper (Rtypes.int8_of_int64 x))
and _to_Semaphore'V1'decrement'arg (x:Xdr.xdr_value) : t_Semaphore'V1'decrement'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (Xdr.dest_xv_enum_fast x = 1)) s.(1)
     ))
and _of_Semaphore'V1'decrement'arg (x:t_Semaphore'V1'decrement'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast
     [|
       ((_of_longstring x0));
       ((if x1 then Xdr.xv_true else Xdr.xv_false));
     |]
   )
and _to_Semaphore'V1'decrement'res (x:Xdr.xdr_value) : t_Semaphore'V1'decrement'res =
  (Rtypes.int64_of_int8 (Xdr.dest_xv_hyper x))
and _of_Semaphore'V1'decrement'res (x:t_Semaphore'V1'decrement'res) : Xdr.xdr_value =
  (Xdr.XV_hyper (Rtypes.int8_of_int64 x))
and _to_Semaphore'V1'get'arg (x:Xdr.xdr_value) : t_Semaphore'V1'get'arg =
  (_to_longstring x)
and _of_Semaphore'V1'get'arg (x:t_Semaphore'V1'get'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Semaphore'V1'get'res (x:Xdr.xdr_value) : t_Semaphore'V1'get'res =
  (Rtypes.int64_of_int8 (Xdr.dest_xv_hyper x))
and _of_Semaphore'V1'get'res (x:t_Semaphore'V1'get'res) : Xdr.xdr_value =
  (Xdr.XV_hyper (Rtypes.int8_of_int64 x))
and _to_Semaphore'V1'create'arg (x:Xdr.xdr_value) : t_Semaphore'V1'create'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (Rtypes.int64_of_int8 (Xdr.dest_xv_hyper x))) s.(1), 
       (fun x -> (Xdr.dest_xv_enum_fast x = 1)) s.(2)
     ))
and _of_Semaphore'V1'create'arg (x:t_Semaphore'V1'create'arg) : Xdr.xdr_value =
  (let (x0, x1, x2) = x in
   Xdr.XV_struct_fast
     [|
       ((_of_longstring x0));
       ((Xdr.XV_hyper (Rtypes.int8_of_int64 x1)));
       ((if x2 then Xdr.xv_true else Xdr.xv_false));
     |]
   )
and _to_Semaphore'V1'create'res (x:Xdr.xdr_value) : t_Semaphore'V1'create'res =
  (Xdr.dest_xv_enum_fast x = 1)
and _of_Semaphore'V1'create'res (x:t_Semaphore'V1'create'res) : Xdr.xdr_value =
  (if x then Xdr.xv_true else Xdr.xv_false)
and _to_Semaphore'V1'destroy'arg (x:Xdr.xdr_value) : t_Semaphore'V1'destroy'arg =
  (_to_longstring x)
and _of_Semaphore'V1'destroy'arg (x:t_Semaphore'V1'destroy'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Semaphore'V1'destroy'res (x:Xdr.xdr_value) : t_Semaphore'V1'destroy'res =
  ()
and _of_Semaphore'V1'destroy'res (x:t_Semaphore'V1'destroy'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_shvar_enum (x:Xdr.xdr_value) : shvar_enum =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | 4 -> (Rtypes.mk_int4('\000','\000','\000','\004'))
  | _ -> assert false
  )
and _of_shvar_enum (x:shvar_enum) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | ('\000','\000','\000','\004') -> Xdr.XV_enum_fast 4
  | _ -> failwith "RPC/XDR error: invalid enum value for type `shvar_enum'"
  )
and _to_shvar_code (x:Xdr.xdr_value) : shvar_code =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `shvar_ok 
  | (1, x) -> `shvar_badtype 
  | (2, x) -> `shvar_notfound 
  | (3, x) -> `shvar_exists 
  | (4, x) -> `shvar_noperm 
  | _ -> assert false
  :> [
     | `shvar_ok
     | `shvar_badtype
     | `shvar_notfound
     | `shvar_exists
     | `shvar_noperm
     ]
  )
and _of_shvar_code (x:shvar_code) : Xdr.xdr_value =
  (match x with
  | `shvar_ok -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `shvar_badtype -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `shvar_notfound -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void)
  | `shvar_exists -> Xdr.XV_union_over_enum_fast(3, Xdr.XV_void)
  | `shvar_noperm -> Xdr.XV_union_over_enum_fast(4, Xdr.XV_void))
and _to_shvar_get (x:Xdr.xdr_value) : shvar_get =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `shvar_ok (_to_longstring x)
  | (1, x) -> `shvar_badtype 
  | (2, x) -> `shvar_notfound 
  | (3, x) -> `shvar_exists 
  | (4, x) -> `shvar_noperm 
  | _ -> assert false
  :> [
     | `shvar_ok of _
     | `shvar_badtype
     | `shvar_notfound
     | `shvar_exists
     | `shvar_noperm
     ]
  )
and _of_shvar_get (x:shvar_get) : Xdr.xdr_value =
  (match x with
  | `shvar_ok x -> Xdr.XV_union_over_enum_fast(0, (_of_longstring x))
  | `shvar_badtype -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `shvar_notfound -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void)
  | `shvar_exists -> Xdr.XV_union_over_enum_fast(3, Xdr.XV_void)
  | `shvar_noperm -> Xdr.XV_union_over_enum_fast(4, Xdr.XV_void))
and _to_Sharedvar'V1'ping'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'ping'arg =
  ()
and _of_Sharedvar'V1'ping'arg (x:t_Sharedvar'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Sharedvar'V1'ping'res (x:Xdr.xdr_value) : t_Sharedvar'V1'ping'res =
  ()
and _of_Sharedvar'V1'ping'res (x:t_Sharedvar'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Sharedvar'V1'create_var'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'create_var'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (Xdr.dest_xv_enum_fast x = 1)) s.(1), 
       (fun x -> (Xdr.dest_xv_enum_fast x = 1)) s.(2), 
       (fun x -> (_to_longstring x)) s.(3)
     ))
and _of_Sharedvar'V1'create_var'arg (x:t_Sharedvar'V1'create_var'arg) : Xdr.xdr_value =
  (let (x0, x1, x2, x3) = x in
   Xdr.XV_struct_fast
     [|
       ((_of_longstring x0));
       ((if x1 then Xdr.xv_true else Xdr.xv_false));
       ((if x2 then Xdr.xv_true else Xdr.xv_false));
       ((_of_longstring x3));
     |]
   )
and _to_Sharedvar'V1'create_var'res (x:Xdr.xdr_value) : t_Sharedvar'V1'create_var'res =
  (_to_shvar_code x)
and _of_Sharedvar'V1'create_var'res (x:t_Sharedvar'V1'create_var'res) : Xdr.xdr_value =
  (_of_shvar_code x)
and _to_Sharedvar'V1'set_value'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'set_value'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1), 
       (fun x -> (_to_longstring x)) s.(2)
     ))
and _of_Sharedvar'V1'set_value'arg (x:t_Sharedvar'V1'set_value'arg) : Xdr.xdr_value =
  (let (x0, x1, x2) = x in
   Xdr.XV_struct_fast
     [|
       ((_of_longstring x0));
       ((_of_longstring x1));
       ((_of_longstring x2));
     |]
   )
and _to_Sharedvar'V1'set_value'res (x:Xdr.xdr_value) : t_Sharedvar'V1'set_value'res =
  (_to_shvar_code x)
and _of_Sharedvar'V1'set_value'res (x:t_Sharedvar'V1'set_value'res) : Xdr.xdr_value =
  (_of_shvar_code x)
and _to_Sharedvar'V1'get_value'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'get_value'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_Sharedvar'V1'get_value'arg (x:t_Sharedvar'V1'get_value'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_longstring x1)); |]
   )
and _to_Sharedvar'V1'get_value'res (x:Xdr.xdr_value) : t_Sharedvar'V1'get_value'res =
  (_to_shvar_get x)
and _of_Sharedvar'V1'get_value'res (x:t_Sharedvar'V1'get_value'res) : Xdr.xdr_value =
  (_of_shvar_get x)
and _to_Sharedvar'V1'delete_var'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'delete_var'arg =
  (_to_longstring x)
and _of_Sharedvar'V1'delete_var'arg (x:t_Sharedvar'V1'delete_var'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Sharedvar'V1'delete_var'res (x:Xdr.xdr_value) : t_Sharedvar'V1'delete_var'res =
  (_to_shvar_code x)
and _of_Sharedvar'V1'delete_var'res (x:t_Sharedvar'V1'delete_var'res) : Xdr.xdr_value =
  (_of_shvar_code x)
and _to_Sharedvar'V1'wait_for_value'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'wait_for_value'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_Sharedvar'V1'wait_for_value'arg (x:t_Sharedvar'V1'wait_for_value'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_longstring x1)); |]
   )
and _to_Sharedvar'V1'wait_for_value'res (x:Xdr.xdr_value) : t_Sharedvar'V1'wait_for_value'res =
  (_to_shvar_get x)
and _of_Sharedvar'V1'wait_for_value'res (x:t_Sharedvar'V1'wait_for_value'res) : Xdr.xdr_value =
  (_of_shvar_get x)
and _to_Sharedvar'V1'dump'arg (x:Xdr.xdr_value) : t_Sharedvar'V1'dump'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_Sharedvar'V1'dump'arg (x:t_Sharedvar'V1'dump'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_longstring x1)); |]
   )
and _to_Sharedvar'V1'dump'res (x:Xdr.xdr_value) : t_Sharedvar'V1'dump'res =
  ()
and _of_Sharedvar'V1'dump'res (x:t_Sharedvar'V1'dump'res) : Xdr.xdr_value =
  Xdr.XV_void
;;
let xdrt_longstring = Xdr.X_rec("longstring", Xdr.x_string_max)
;;
let xdrt_longstring_opt =
  Xdr.X_rec("longstring_opt", Xdr.x_optional (xdrt_longstring))
;;
let xdrt_internal_port =
  Xdr.X_rec("internal_port", Xdr.x_optional (xdrt_longstring))
;;
let xdrt_internal_ports =
  Xdr.X_rec("internal_ports", Xdr.x_array_max (xdrt_longstring))
;;
let xdrt_message =
  Xdr.X_rec("message",
    Xdr.X_struct
      [
        ("msg_name", (xdrt_longstring));
        ("msg_arguments", (Xdr.x_array_max (xdrt_longstring)));
      ])
;;
let xdrt_socket_id =
  Xdr.X_rec("socket_id",
    Xdr.X_struct
      [
        ("sock_protocol", (xdrt_longstring));
        ("sock_index", (Xdr.X_int));
      ])
;;
let xdrt_socket_id_list =
  Xdr.X_rec("socket_id_list", Xdr.x_array_max (xdrt_socket_id))
;;
let xdrt_event_type =
  Xdr.X_rec("event_type",
    Xdr.X_enum
      [
        ("EVENT_NONE", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("EVENT_ACCEPT", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("EVENT_NOACCEPT", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("EVENT_RECEIVED_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\003')));
        ("EVENT_RECEIVED_ADMIN_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\004')));
        ("EVENT_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\005')));
        ("EVENT_SYSTEM_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\006')));
      ])
;;
let xdrt_event =
  Xdr.X_rec("event",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("EVENT_NONE", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("EVENT_ACCEPT", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("EVENT_NOACCEPT", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("EVENT_RECEIVED_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\003')));
           ("EVENT_RECEIVED_ADMIN_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\004')));
           ("EVENT_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\005')));
           ("EVENT_SYSTEM_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\006')));
         ]),
      [
        "EVENT_NONE", (Xdr.X_void);
        "EVENT_ACCEPT", (Xdr.X_void);
        "EVENT_NOACCEPT", (Xdr.X_void);
        "EVENT_RECEIVED_MESSAGE", (xdrt_message);
        "EVENT_RECEIVED_ADMIN_MESSAGE", (xdrt_message);
        "EVENT_SHUTDOWN", (Xdr.X_void);
        "EVENT_SYSTEM_SHUTDOWN", (Xdr.X_void);
      ],
      None))
;;
let xdrt_level =
  Xdr.X_rec("level",
    Xdr.X_enum
      [
        ("LOG_EMERG", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("LOG_ALERT", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("LOG_CRIT", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("LOG_ERR", (Rtypes.mk_int4('\000','\000','\000','\003')));
        ("LOG_WARNING", (Rtypes.mk_int4('\000','\000','\000','\004')));
        ("LOG_NOTICE", (Rtypes.mk_int4('\000','\000','\000','\005')));
        ("LOG_INFO", (Rtypes.mk_int4('\000','\000','\000','\006')));
        ("LOG_DEBUG", (Rtypes.mk_int4('\000','\000','\000','\007')));
      ])
;;
let xdrt_Control'V1'ping'arg = Xdr.X_void
;;
let xdrt_Control'V1'ping'res = Xdr.X_void
;;
let xdrt_Control'V1'poll'arg =
  Xdr.X_struct [   ("0", Xdr.X_int);   ("1", Xdr.x_bool); ]
;;
let xdrt_Control'V1'poll'res = xdrt_event
;;
let xdrt_Control'V1'accepted'arg = Xdr.X_void
;;
let xdrt_Control'V1'accepted'res = Xdr.X_void
;;
let xdrt_System'V1'ping'arg = Xdr.X_void
;;
let xdrt_System'V1'ping'res = Xdr.X_void
;;
let xdrt_System'V1'lookup'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_longstring); ]
;;
let xdrt_System'V1'lookup'res = xdrt_internal_port
;;
let xdrt_System'V1'send_message'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_message); ]
;;
let xdrt_System'V1'send_message'res = Xdr.X_void
;;
let xdrt_System'V1'log'arg =
  Xdr.X_struct
    [
      ("0", xdrt_level);
      ("1", xdrt_longstring);
      ("2", xdrt_longstring);
    ]
;;
let xdrt_System'V1'log'res = Xdr.X_void
;;
let xdrt_System'V1'call_plugin'arg =
  Xdr.X_struct
    [
      ("0", Xdr.X_hyper);
      ("1", xdrt_longstring);
      ("2", xdrt_longstring);
    ]
;;
let xdrt_System'V1'call_plugin'res = xdrt_longstring
;;
let xdrt_System'V1'register_container_socket'arg =
  Xdr.X_struct
    [
      ("0", xdrt_longstring);
      ("1", xdrt_longstring);
      ("2", xdrt_longstring);
    ]
;;
let xdrt_System'V1'register_container_socket'res = Xdr.X_void
;;
let xdrt_System'V1'lookup_container_sockets'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_longstring); ]
;;
let xdrt_System'V1'lookup_container_sockets'res = xdrt_internal_ports
;;
let xdrt_System'V1'activate_lever'arg =
  Xdr.X_struct [   ("0", Xdr.X_int);   ("1", xdrt_longstring); ]
;;
let xdrt_System'V1'activate_lever'res = xdrt_longstring
;;
let xdrt_result_code =
  Xdr.X_rec("result_code",
    Xdr.X_enum
      [
        ("CODE_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("CODE_ERROR", (Rtypes.mk_int4('\000','\000','\000','\001')));
      ])
;;
let xdrt_unit_result =
  Xdr.X_rec("unit_result",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("CODE_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("CODE_ERROR", (Rtypes.mk_int4('\000','\000','\000','\001')));
         ]),
      [
        "CODE_OK", (Xdr.X_void);
        "CODE_ERROR", (xdrt_longstring);
      ],
      None))
;;
let xdrt_socket_domain =
  Xdr.X_rec("socket_domain",
    Xdr.X_enum
      [
        ("PF_UNKNOWN", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("PF_UNIX", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("PF_INET", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("PF_INET6", (Rtypes.mk_int4('\000','\000','\000','\003')));
      ])
;;
let xdrt_port =
  Xdr.X_rec("port",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("PF_UNKNOWN", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("PF_UNIX", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("PF_INET", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("PF_INET6", (Rtypes.mk_int4('\000','\000','\000','\003')));
         ]),
      [
        "PF_UNKNOWN", (Xdr.X_void);
        "PF_UNIX", (xdrt_longstring);
        "PF_INET",
          (Xdr.X_struct
             [
               ("inet_addr", (xdrt_longstring));
               ("inet_port", (Xdr.X_int));
             ]);
        "PF_INET6",
          (Xdr.X_struct
             [
               ("inet6_addr", (xdrt_longstring));
               ("inet6_port", (Xdr.X_int));
             ]);
      ],
      None))
;;
let xdrt_port_list = Xdr.X_rec("port_list", Xdr.x_array_max (xdrt_port))
;;
let xdrt_prot =
  Xdr.X_rec("prot",
    Xdr.X_struct
      [
        ("prot_name", (xdrt_longstring));
        ("prot_ports", (xdrt_port_list));
      ])
;;
let xdrt_prot_list = Xdr.X_rec("prot_list", Xdr.x_array_max (xdrt_prot))
;;
let xdrt_srv_state =
  Xdr.X_rec("srv_state",
    Xdr.X_enum
      [
        ("STATE_ENABLED", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("STATE_DISABLED", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("STATE_RESTARTING", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("STATE_DOWN", (Rtypes.mk_int4('\000','\000','\000','\003')));
      ])
;;
let xdrt_cnt_state_enum =
  Xdr.X_rec("cnt_state_enum",
    Xdr.X_enum
      [
        ("CSTATE_ACCEPTING", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("CSTATE_SELECTED", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("CSTATE_BUSY", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("CSTATE_STARTING", (Rtypes.mk_int4('\000','\000','\000','\003')));
        ("CSTATE_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\004')));
      ])
;;
let xdrt_cnt_state =
  Xdr.X_rec("cnt_state",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("CSTATE_ACCEPTING", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("CSTATE_SELECTED", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("CSTATE_BUSY", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("CSTATE_STARTING", (Rtypes.mk_int4('\000','\000','\000','\003')));
           ("CSTATE_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\004')));
         ]),
      [
        "CSTATE_ACCEPTING", (Xdr.X_void);
      ],
      Some(Xdr.X_void)))
;;
let xdrt_container_info =
  Xdr.X_rec("container_info",
    Xdr.X_struct
      [
        ("cnt_id", (Xdr.X_hyper));
        ("cnt_sys_id", (xdrt_longstring));
        ("cnt_state", (xdrt_cnt_state));
      ])
;;
let xdrt_service_info =
  Xdr.X_rec("service_info",
    Xdr.X_struct
      [
        ("srv_name", (xdrt_longstring));
        ("srv_protocols", (xdrt_prot_list));
        ("srv_nr_containers", (Xdr.X_int));
        ("srv_containers", (Xdr.x_array_max (xdrt_container_info)));
        ("srv_state", (xdrt_srv_state));
      ])
;;
let xdrt_service_info_list =
  Xdr.X_rec("service_info_list", Xdr.x_array_max (xdrt_service_info))
;;
let xdrt_Admin'V2'ping'arg = Xdr.X_void
;;
let xdrt_Admin'V2'ping'res = Xdr.X_void
;;
let xdrt_Admin'V2'list'arg = Xdr.X_void
;;
let xdrt_Admin'V2'list'res = xdrt_service_info_list
;;
let xdrt_Admin'V2'enable'arg = xdrt_longstring
;;
let xdrt_Admin'V2'enable'res = xdrt_unit_result
;;
let xdrt_Admin'V2'disable'arg = xdrt_longstring
;;
let xdrt_Admin'V2'disable'res = xdrt_unit_result
;;
let xdrt_Admin'V2'restart'arg = xdrt_longstring
;;
let xdrt_Admin'V2'restart'res = xdrt_unit_result
;;
let xdrt_Admin'V2'restart_all'arg = Xdr.X_void
;;
let xdrt_Admin'V2'restart_all'res = xdrt_unit_result
;;
let xdrt_Admin'V2'system_shutdown'arg = Xdr.X_void
;;
let xdrt_Admin'V2'system_shutdown'res = xdrt_unit_result
;;
let xdrt_Admin'V2'reopen_logfiles'arg = Xdr.X_void
;;
let xdrt_Admin'V2'reopen_logfiles'res = xdrt_unit_result
;;
let xdrt_Admin'V2'send_admin_message'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_message); ]
;;
let xdrt_Admin'V2'send_admin_message'res = Xdr.X_void
;;
let xdrt_Semaphore'V1'ping'arg = Xdr.X_void
;;
let xdrt_Semaphore'V1'ping'res = Xdr.X_void
;;
let xdrt_Semaphore'V1'increment'arg = xdrt_longstring
;;
let xdrt_Semaphore'V1'increment'res = Xdr.X_hyper
;;
let xdrt_Semaphore'V1'decrement'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", Xdr.x_bool); ]
;;
let xdrt_Semaphore'V1'decrement'res = Xdr.X_hyper
;;
let xdrt_Semaphore'V1'get'arg = xdrt_longstring
;;
let xdrt_Semaphore'V1'get'res = Xdr.X_hyper
;;
let xdrt_Semaphore'V1'create'arg =
  Xdr.X_struct
    [   ("0", xdrt_longstring);   ("1", Xdr.X_hyper);   ("2", Xdr.x_bool); ]
;;
let xdrt_Semaphore'V1'create'res = Xdr.x_bool
;;
let xdrt_Semaphore'V1'destroy'arg = xdrt_longstring
;;
let xdrt_Semaphore'V1'destroy'res = Xdr.X_void
;;
let xdrt_shvar_enum =
  Xdr.X_rec("shvar_enum",
    Xdr.X_enum
      [
        ("SHVAR_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("SHVAR_BADTYPE", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("SHVAR_NOTFOUND", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("SHVAR_EXISTS", (Rtypes.mk_int4('\000','\000','\000','\003')));
        ("SHVAR_NOPERM", (Rtypes.mk_int4('\000','\000','\000','\004')));
      ])
;;
let xdrt_shvar_code =
  Xdr.X_rec("shvar_code",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("SHVAR_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("SHVAR_BADTYPE", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("SHVAR_NOTFOUND", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("SHVAR_EXISTS", (Rtypes.mk_int4('\000','\000','\000','\003')));
           ("SHVAR_NOPERM", (Rtypes.mk_int4('\000','\000','\000','\004')));
         ]),
      [
        "SHVAR_OK", (Xdr.X_void);
      ],
      Some(Xdr.X_void)))
;;
let xdrt_shvar_get =
  Xdr.X_rec("shvar_get",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("SHVAR_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("SHVAR_BADTYPE", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("SHVAR_NOTFOUND", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("SHVAR_EXISTS", (Rtypes.mk_int4('\000','\000','\000','\003')));
           ("SHVAR_NOPERM", (Rtypes.mk_int4('\000','\000','\000','\004')));
         ]),
      [
        "SHVAR_OK", (xdrt_longstring);
      ],
      Some(Xdr.X_void)))
;;
let xdrt_Sharedvar'V1'ping'arg = Xdr.X_void
;;
let xdrt_Sharedvar'V1'ping'res = Xdr.X_void
;;
let xdrt_Sharedvar'V1'create_var'arg =
  Xdr.X_struct
    [
      ("0", xdrt_longstring);
      ("1", Xdr.x_bool);
      ("2", Xdr.x_bool);
      ("3", xdrt_longstring);
    ]
;;
let xdrt_Sharedvar'V1'create_var'res = xdrt_shvar_code
;;
let xdrt_Sharedvar'V1'set_value'arg =
  Xdr.X_struct
    [
      ("0", xdrt_longstring);
      ("1", xdrt_longstring);
      ("2", xdrt_longstring);
    ]
;;
let xdrt_Sharedvar'V1'set_value'res = xdrt_shvar_code
;;
let xdrt_Sharedvar'V1'get_value'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_longstring); ]
;;
let xdrt_Sharedvar'V1'get_value'res = xdrt_shvar_get
;;
let xdrt_Sharedvar'V1'delete_var'arg = xdrt_longstring
;;
let xdrt_Sharedvar'V1'delete_var'res = xdrt_shvar_code
;;
let xdrt_Sharedvar'V1'wait_for_value'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_longstring); ]
;;
let xdrt_Sharedvar'V1'wait_for_value'res = xdrt_shvar_get
;;
let xdrt_Sharedvar'V1'dump'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_longstring); ]
;;
let xdrt_Sharedvar'V1'dump'res = Xdr.X_void
;;
let program_Control'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_Control'V1'ping'arg,
        xdrt_Control'V1'ping'res);
      "poll",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_Control'V1'poll'arg,
        xdrt_Control'V1'poll'res);
      "accepted",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_Control'V1'accepted'arg,
        xdrt_Control'V1'accepted'res);
    ]
;;
let program_System'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\002'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_System'V1'ping'arg,
        xdrt_System'V1'ping'res);
      "lookup",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_System'V1'lookup'arg,
        xdrt_System'V1'lookup'res);
      "send_message",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_System'V1'send_message'arg,
        xdrt_System'V1'send_message'res);
      "log",
        ((Rtypes.mk_uint4('\000','\000','\000','\003')),
        xdrt_System'V1'log'arg,
        xdrt_System'V1'log'res);
      "call_plugin",
        ((Rtypes.mk_uint4('\000','\000','\000','\004')),
        xdrt_System'V1'call_plugin'arg,
        xdrt_System'V1'call_plugin'res);
      "register_container_socket",
        ((Rtypes.mk_uint4('\000','\000','\000','\005')),
        xdrt_System'V1'register_container_socket'arg,
        xdrt_System'V1'register_container_socket'res);
      "lookup_container_sockets",
        ((Rtypes.mk_uint4('\000','\000','\000','\006')),
        xdrt_System'V1'lookup_container_sockets'arg,
        xdrt_System'V1'lookup_container_sockets'res);
      "activate_lever",
        ((Rtypes.mk_uint4('\000','\000','\000','\007')),
        xdrt_System'V1'activate_lever'arg,
        xdrt_System'V1'activate_lever'res);
    ]
;;
let program_Admin'V2 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\003'))
    (Rtypes.mk_uint4('\000','\000','\000','\002'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_Admin'V2'ping'arg,
        xdrt_Admin'V2'ping'res);
      "list",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_Admin'V2'list'arg,
        xdrt_Admin'V2'list'res);
      "enable",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_Admin'V2'enable'arg,
        xdrt_Admin'V2'enable'res);
      "disable",
        ((Rtypes.mk_uint4('\000','\000','\000','\003')),
        xdrt_Admin'V2'disable'arg,
        xdrt_Admin'V2'disable'res);
      "restart",
        ((Rtypes.mk_uint4('\000','\000','\000','\004')),
        xdrt_Admin'V2'restart'arg,
        xdrt_Admin'V2'restart'res);
      "restart_all",
        ((Rtypes.mk_uint4('\000','\000','\000','\005')),
        xdrt_Admin'V2'restart_all'arg,
        xdrt_Admin'V2'restart_all'res);
      "system_shutdown",
        ((Rtypes.mk_uint4('\000','\000','\000','\006')),
        xdrt_Admin'V2'system_shutdown'arg,
        xdrt_Admin'V2'system_shutdown'res);
      "reopen_logfiles",
        ((Rtypes.mk_uint4('\000','\000','\000','\007')),
        xdrt_Admin'V2'reopen_logfiles'arg,
        xdrt_Admin'V2'reopen_logfiles'res);
      "send_admin_message",
        ((Rtypes.mk_uint4('\000','\000','\000','\008')),
        xdrt_Admin'V2'send_admin_message'arg,
        xdrt_Admin'V2'send_admin_message'res);
    ]
;;
let program_Semaphore'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\004'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_Semaphore'V1'ping'arg,
        xdrt_Semaphore'V1'ping'res);
      "increment",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_Semaphore'V1'increment'arg,
        xdrt_Semaphore'V1'increment'res);
      "decrement",
        ((Rtypes.mk_uint4('\000','\000','\000','\003')),
        xdrt_Semaphore'V1'decrement'arg,
        xdrt_Semaphore'V1'decrement'res);
      "get",
        ((Rtypes.mk_uint4('\000','\000','\000','\004')),
        xdrt_Semaphore'V1'get'arg,
        xdrt_Semaphore'V1'get'res);
      "create",
        ((Rtypes.mk_uint4('\000','\000','\000','\005')),
        xdrt_Semaphore'V1'create'arg,
        xdrt_Semaphore'V1'create'res);
      "destroy",
        ((Rtypes.mk_uint4('\000','\000','\000','\006')),
        xdrt_Semaphore'V1'destroy'arg,
        xdrt_Semaphore'V1'destroy'res);
    ]
;;
let program_Sharedvar'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\005'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_Sharedvar'V1'ping'arg,
        xdrt_Sharedvar'V1'ping'res);
      "create_var",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_Sharedvar'V1'create_var'arg,
        xdrt_Sharedvar'V1'create_var'res);
      "set_value",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_Sharedvar'V1'set_value'arg,
        xdrt_Sharedvar'V1'set_value'res);
      "get_value",
        ((Rtypes.mk_uint4('\000','\000','\000','\003')),
        xdrt_Sharedvar'V1'get_value'arg,
        xdrt_Sharedvar'V1'get_value'res);
      "delete_var",
        ((Rtypes.mk_uint4('\000','\000','\000','\004')),
        xdrt_Sharedvar'V1'delete_var'arg,
        xdrt_Sharedvar'V1'delete_var'res);
      "wait_for_value",
        ((Rtypes.mk_uint4('\000','\000','\000','\005')),
        xdrt_Sharedvar'V1'wait_for_value'arg,
        xdrt_Sharedvar'V1'wait_for_value'res);
      "dump",
        ((Rtypes.mk_uint4('\000','\000','\000','\006')),
        xdrt_Sharedvar'V1'dump'arg,
        xdrt_Sharedvar'V1'dump'res);
    ]
;;

