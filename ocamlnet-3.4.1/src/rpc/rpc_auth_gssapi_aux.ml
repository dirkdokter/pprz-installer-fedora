(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * rpc_auth_gssapi.x
 *
 ************************************************************)
type rpc_gss_proc_enum_t = 
      Rtypes.int4
and rpc_gss_proc_t = 
      [ 
      | `rpcsec_gss_data 
      | `rpcsec_gss_init 
      | `rpcsec_gss_continue_init 
      | `rpcsec_gss_destroy 
      ]
and rpc_gss_service_enum_t = 
      Rtypes.int4
and rpc_gss_service_t = 
      [ | `rpc_gss_svc_none | `rpc_gss_svc_integrity | `rpc_gss_svc_privacy ]
and rpc_gss_cred_t = 
      [ | `_1 of (_t0) ]
and rpc_gss_init_arg = 
      { 
        mutable gss_token : string;
      }
and rpc_gss_init_res = 
      { 
        mutable res_handle : string;
        mutable res_major : Rtypes.uint4;
        mutable res_minor : Rtypes.uint4;
        mutable res_seq_window : Rtypes.uint4;
        mutable res_token : string;
      }
and rpc_gss_integ_data = 
      { 
        mutable databody_integ : Xdr_mstring.mstring;
        mutable checksum : string;
      }
and rpc_gss_priv_data = 
      { 
        mutable databody_priv : Xdr_mstring.mstring;
      }
and _t0 = 
      { 
        mutable gss_proc : rpc_gss_proc_t;
        mutable seq_num : Rtypes.uint4;
        mutable service : rpc_gss_service_t;
        mutable handle : string;
      }
;;
let rpcsec_gss_data = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let rpcsec_gss_init = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let rpcsec_gss_continue_init = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let rpcsec_gss_destroy = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let rpc_gss_svc_none = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let rpc_gss_svc_integrity = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let rpc_gss_svc_privacy = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let gss_s_complete = (Rtypes.mk_uint4('\000','\000','\000','\000'));;
let gss_s_continue_needed = (Rtypes.mk_uint4('\000','\000','\000','\001'));;
let zero = (Rtypes.mk_uint4('\000','\000','\000','\000'));;
let maxseq = (Rtypes.mk_uint4('\128','\000','\000','\000'));;
let rec _to_rpc_gss_proc_enum_t (x:Xdr.xdr_value) : rpc_gss_proc_enum_t =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | _ -> assert false
  )
and _of_rpc_gss_proc_enum_t (x:rpc_gss_proc_enum_t) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | _ -> failwith "RPC/XDR error: invalid enum value for type `rpc_gss_proc_enum_t'"
  )
and _to_rpc_gss_proc_t (x:Xdr.xdr_value) : rpc_gss_proc_t =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `rpcsec_gss_data 
  | (1, x) -> `rpcsec_gss_init 
  | (2, x) -> `rpcsec_gss_continue_init 
  | (3, x) -> `rpcsec_gss_destroy 
  | _ -> assert false
  :> [
     | `rpcsec_gss_data
     | `rpcsec_gss_init
     | `rpcsec_gss_continue_init
     | `rpcsec_gss_destroy
     ]
  )
and _of_rpc_gss_proc_t (x:rpc_gss_proc_t) : Xdr.xdr_value =
  (match x with
  | `rpcsec_gss_data -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `rpcsec_gss_init -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `rpcsec_gss_continue_init -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void)
  | `rpcsec_gss_destroy -> Xdr.XV_union_over_enum_fast(3, Xdr.XV_void))
and _to_rpc_gss_service_enum_t (x:Xdr.xdr_value) : rpc_gss_service_enum_t =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | _ -> assert false
  )
and _of_rpc_gss_service_enum_t (x:rpc_gss_service_enum_t) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 2
  | _ -> failwith "RPC/XDR error: invalid enum value for type `rpc_gss_service_enum_t'"
  )
and _to_rpc_gss_service_t (x:Xdr.xdr_value) : rpc_gss_service_t =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `rpc_gss_svc_none 
  | (1, x) -> `rpc_gss_svc_integrity 
  | (2, x) -> `rpc_gss_svc_privacy 
  | _ -> assert false
  :> [ | `rpc_gss_svc_none | `rpc_gss_svc_integrity | `rpc_gss_svc_privacy ]
  )
and _of_rpc_gss_service_t (x:rpc_gss_service_t) : Xdr.xdr_value =
  (match x with
  | `rpc_gss_svc_none -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `rpc_gss_svc_integrity -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `rpc_gss_svc_privacy -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void))
and _to_rpc_gss_cred_t (x:Xdr.xdr_value) : rpc_gss_cred_t =
  (let discriminant, value = Xdr.dest_xv_union_over_uint x in
  match Rtypes.dest_uint4 discriminant, value with
  | (('\000','\000','\000','\001'), x) ->
        `_1 (let s = Xdr.dest_xv_struct_fast x in
               { gss_proc = (fun x -> (_to_rpc_gss_proc_t x)) s.(0); 
                 seq_num = (fun x -> (Xdr.dest_xv_uint x)) s.(1); 
                 service = (fun x -> (_to_rpc_gss_service_t x)) s.(2); 
                 handle = (fun x -> (Xdr.dest_xv_opaque x)) s.(3); 
               })
  | _ -> assert false
  :> [ | `_1 of _ ]
  )
and _of_rpc_gss_cred_t (x:rpc_gss_cred_t) : Xdr.xdr_value =
  (match x with
  | `_1 x ->
        Xdr.XV_union_over_uint((Rtypes.mk_uint4('\000','\000','\000','\001')),
                               (Xdr.XV_struct_fast
                                  [|
                                    (let x = x.gss_proc in
                                      (_of_rpc_gss_proc_t x));
                                    (let x = x.seq_num in (Xdr.XV_uint x));
                                    (let x = x.service in
                                      (_of_rpc_gss_service_t x));
                                    (let x = x.handle in (Xdr.XV_opaque x));
                                  |]))
  )
and _to_rpc_gss_init_arg (x:Xdr.xdr_value) : rpc_gss_init_arg =
  (let s = Xdr.dest_xv_struct_fast x in
     { gss_token = (fun x -> (Xdr.dest_xv_opaque x)) s.(0); 
     })
and _of_rpc_gss_init_arg (x:rpc_gss_init_arg) : Xdr.xdr_value =
  (Xdr.XV_struct_fast [|   (let x = x.gss_token in (Xdr.XV_opaque x)); |])
and _to_rpc_gss_init_res (x:Xdr.xdr_value) : rpc_gss_init_res =
  (let s = Xdr.dest_xv_struct_fast x in
     { res_handle = (fun x -> (Xdr.dest_xv_opaque x)) s.(0); 
       res_major = (fun x -> (Xdr.dest_xv_uint x)) s.(1); 
       res_minor = (fun x -> (Xdr.dest_xv_uint x)) s.(2); 
       res_seq_window = (fun x -> (Xdr.dest_xv_uint x)) s.(3); 
       res_token = (fun x -> (Xdr.dest_xv_opaque x)) s.(4); 
     })
and _of_rpc_gss_init_res (x:rpc_gss_init_res) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.res_handle in (Xdr.XV_opaque x));
       (let x = x.res_major in (Xdr.XV_uint x));
       (let x = x.res_minor in (Xdr.XV_uint x));
       (let x = x.res_seq_window in (Xdr.XV_uint x));
       (let x = x.res_token in (Xdr.XV_opaque x));
     |])
and _to_rpc_gss_integ_data (x:Xdr.xdr_value) : rpc_gss_integ_data =
  (let s = Xdr.dest_xv_struct_fast x in
     { databody_integ = (fun x -> (Xdr.dest_xv_mstring x)) s.(0); 
       checksum = (fun x -> (Xdr.dest_xv_opaque x)) s.(1); 
     })
and _of_rpc_gss_integ_data (x:rpc_gss_integ_data) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.databody_integ in (Xdr.XV_mstring x));
       (let x = x.checksum in (Xdr.XV_opaque x));
     |])
and _to_rpc_gss_priv_data (x:Xdr.xdr_value) : rpc_gss_priv_data =
  (let s = Xdr.dest_xv_struct_fast x in
     { databody_priv = (fun x -> (Xdr.dest_xv_mstring x)) s.(0); 
     })
and _of_rpc_gss_priv_data (x:rpc_gss_priv_data) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.databody_priv in (Xdr.XV_mstring x));
     |])
;;
let xdrt_rpc_gss_proc_enum_t =
  Xdr.X_rec("rpc_gss_proc_enum_t",
    Xdr.X_enum
      [
        ("RPCSEC_GSS_DATA", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("RPCSEC_GSS_INIT", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("RPCSEC_GSS_CONTINUE_INIT", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("RPCSEC_GSS_DESTROY", (Rtypes.mk_int4('\000','\000','\000','\003')));
      ])
;;
let xdrt_rpc_gss_proc_t =
  Xdr.X_rec("rpc_gss_proc_t",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("RPCSEC_GSS_DATA", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("RPCSEC_GSS_INIT", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("RPCSEC_GSS_CONTINUE_INIT", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("RPCSEC_GSS_DESTROY", (Rtypes.mk_int4('\000','\000','\000','\003')));
         ]),
      [
        "RPCSEC_GSS_DATA", (Xdr.X_void);
      ],
      Some(Xdr.X_void)))
;;
let xdrt_rpc_gss_service_enum_t =
  Xdr.X_rec("rpc_gss_service_enum_t",
    Xdr.X_enum
      [
        ("rpc_gss_svc_none", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("rpc_gss_svc_integrity", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("rpc_gss_svc_privacy", (Rtypes.mk_int4('\000','\000','\000','\003')));
      ])
;;
let xdrt_rpc_gss_service_t =
  Xdr.X_rec("rpc_gss_service_t",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("rpc_gss_svc_none", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("rpc_gss_svc_integrity", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("rpc_gss_svc_privacy", (Rtypes.mk_int4('\000','\000','\000','\003')));
         ]),
      [
        "rpc_gss_svc_none", (Xdr.X_void);
      ],
      Some(Xdr.X_void)))
;;
let xdrt_rpc_gss_cred_t =
  Xdr.X_rec("rpc_gss_cred_t",
    Xdr.X_union_over_uint([
                            (Rtypes.mk_uint4('\000','\000','\000','\001')),
                              (Xdr.X_struct
                                 [
                                   ("gss_proc", (xdrt_rpc_gss_proc_t));
                                   ("seq_num", (Xdr.X_uint));
                                   ("service", (xdrt_rpc_gss_service_t));
                                   ("handle", (Xdr.x_opaque_max));
                                 ]);
                          ],
                          None))
;;
let xdrt_rpc_gss_init_arg =
  Xdr.X_rec("rpc_gss_init_arg",
    Xdr.X_struct [   ("gss_token", (Xdr.x_opaque_max)); ])
;;
let xdrt_rpc_gss_init_res =
  Xdr.X_rec("rpc_gss_init_res",
    Xdr.X_struct
      [
        ("res_handle", (Xdr.x_opaque_max));
        ("res_major", (Xdr.X_uint));
        ("res_minor", (Xdr.X_uint));
        ("res_seq_window", (Xdr.X_uint));
        ("res_token", (Xdr.x_opaque_max));
      ])
;;
let xdrt_rpc_gss_integ_data =
  Xdr.X_rec("rpc_gss_integ_data",
    Xdr.X_struct
      [
        ("databody_integ", ((Xdr.x_mstring_max "databody_integ")));
        ("checksum", (Xdr.x_opaque_max));
      ])
;;
let xdrt_rpc_gss_priv_data =
  Xdr.X_rec("rpc_gss_priv_data",
    Xdr.X_struct
      [   ("databody_priv", ((Xdr.x_mstring_max "databody_priv"))); ])
;;

