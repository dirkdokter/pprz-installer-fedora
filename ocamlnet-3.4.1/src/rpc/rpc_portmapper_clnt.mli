(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * rpc_portmapper.x
 *
 ************************************************************)
module Make'PMAP(U'C:Rpc_client.USE_CLIENT) : sig
  module V2 : sig
    open Rpc_portmapper_aux
    type t = U'C.t
    val _program : Rpc_program.t
    val pmapproc_null :
            U'C.t ->
            t_PMAP'V2'pmapproc_null'arg ->
            t_PMAP'V2'pmapproc_null'res
    val pmapproc_null'async :
            U'C.t ->
            t_PMAP'V2'pmapproc_null'arg ->
            ((unit -> t_PMAP'V2'pmapproc_null'res) -> unit) ->
            unit
    val pmapproc_set :
            U'C.t ->
            t_PMAP'V2'pmapproc_set'arg ->
            t_PMAP'V2'pmapproc_set'res
    val pmapproc_set'async :
            U'C.t ->
            t_PMAP'V2'pmapproc_set'arg ->
            ((unit -> t_PMAP'V2'pmapproc_set'res) -> unit) ->
            unit
    val pmapproc_unset :
            U'C.t ->
            t_PMAP'V2'pmapproc_unset'arg ->
            t_PMAP'V2'pmapproc_unset'res
    val pmapproc_unset'async :
            U'C.t ->
            t_PMAP'V2'pmapproc_unset'arg ->
            ((unit -> t_PMAP'V2'pmapproc_unset'res) -> unit) ->
            unit
    val pmapproc_getport :
            U'C.t ->
            t_PMAP'V2'pmapproc_getport'arg ->
            t_PMAP'V2'pmapproc_getport'res
    val pmapproc_getport'async :
            U'C.t ->
            t_PMAP'V2'pmapproc_getport'arg ->
            ((unit -> t_PMAP'V2'pmapproc_getport'res) -> unit) ->
            unit
    val pmapproc_dump :
            U'C.t ->
            t_PMAP'V2'pmapproc_dump'arg ->
            t_PMAP'V2'pmapproc_dump'res
    val pmapproc_dump'async :
            U'C.t ->
            t_PMAP'V2'pmapproc_dump'arg ->
            ((unit -> t_PMAP'V2'pmapproc_dump'res) -> unit) ->
            unit
    val pmapproc_callit :
            U'C.t ->
            t_PMAP'V2'pmapproc_callit'arg ->
            t_PMAP'V2'pmapproc_callit'res
    val pmapproc_callit'async :
            U'C.t ->
            t_PMAP'V2'pmapproc_callit'arg ->
            ((unit -> t_PMAP'V2'pmapproc_callit'res) -> unit) ->
            unit
    
  end
  
end

module PMAP : sig
  module V2 : sig
    open Rpc_portmapper_aux
    type t = Rpc_client.t
    val create_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.connector ->
            Rpc.protocol ->
            Rpc_client.t
    val create_portmapped_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            string ->
            Rpc.protocol ->
            Rpc_client.t
    val create_client2 :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.mode2 ->
            Rpc_client.t
    val _program : Rpc_program.t
    val pmapproc_null :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_null'arg ->
            t_PMAP'V2'pmapproc_null'res
    val pmapproc_null'async :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_null'arg ->
            ((unit -> t_PMAP'V2'pmapproc_null'res) -> unit) ->
            unit
    val pmapproc_set :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_set'arg ->
            t_PMAP'V2'pmapproc_set'res
    val pmapproc_set'async :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_set'arg ->
            ((unit -> t_PMAP'V2'pmapproc_set'res) -> unit) ->
            unit
    val pmapproc_unset :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_unset'arg ->
            t_PMAP'V2'pmapproc_unset'res
    val pmapproc_unset'async :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_unset'arg ->
            ((unit -> t_PMAP'V2'pmapproc_unset'res) -> unit) ->
            unit
    val pmapproc_getport :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_getport'arg ->
            t_PMAP'V2'pmapproc_getport'res
    val pmapproc_getport'async :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_getport'arg ->
            ((unit -> t_PMAP'V2'pmapproc_getport'res) -> unit) ->
            unit
    val pmapproc_dump :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_dump'arg ->
            t_PMAP'V2'pmapproc_dump'res
    val pmapproc_dump'async :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_dump'arg ->
            ((unit -> t_PMAP'V2'pmapproc_dump'res) -> unit) ->
            unit
    val pmapproc_callit :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_callit'arg ->
            t_PMAP'V2'pmapproc_callit'res
    val pmapproc_callit'async :
            Rpc_client.t ->
            t_PMAP'V2'pmapproc_callit'arg ->
            ((unit -> t_PMAP'V2'pmapproc_callit'res) -> unit) ->
            unit
    
  end
  
end


