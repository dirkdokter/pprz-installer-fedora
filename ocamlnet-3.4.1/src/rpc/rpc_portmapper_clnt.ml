(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * rpc_portmapper.x
 *
 ************************************************************)
module Make'PMAP(U'C:Rpc_client.USE_CLIENT) = struct
  module V2 = struct
    open Rpc_portmapper_aux
    let _program = program_PMAP'V2
    type t = U'C.t
    
    let pmapproc_null client arg =
      _to_PMAP'V2'pmapproc_null'res (U'C.unbound_sync_call client _program "PMAPPROC_NULL" (_of_PMAP'V2'pmapproc_null'arg arg))
    
    let pmapproc_null'async client arg pass_reply =
      U'C.unbound_async_call client _program "PMAPPROC_NULL" (_of_PMAP'V2'pmapproc_null'arg arg)
        (fun g -> pass_reply (fun () -> _to_PMAP'V2'pmapproc_null'res (g())))
      
    
    let pmapproc_set client arg =
      _to_PMAP'V2'pmapproc_set'res (U'C.unbound_sync_call client _program "PMAPPROC_SET" (_of_PMAP'V2'pmapproc_set'arg arg))
    
    let pmapproc_set'async client arg pass_reply =
      U'C.unbound_async_call client _program "PMAPPROC_SET" (_of_PMAP'V2'pmapproc_set'arg arg)
        (fun g -> pass_reply (fun () -> _to_PMAP'V2'pmapproc_set'res (g())))
      
    
    let pmapproc_unset client arg =
      _to_PMAP'V2'pmapproc_unset'res (U'C.unbound_sync_call client _program "PMAPPROC_UNSET" (_of_PMAP'V2'pmapproc_unset'arg arg))
    
    let pmapproc_unset'async client arg pass_reply =
      U'C.unbound_async_call client _program "PMAPPROC_UNSET" (_of_PMAP'V2'pmapproc_unset'arg arg)
        (fun g -> pass_reply (fun () -> _to_PMAP'V2'pmapproc_unset'res (g())))
      
    
    let pmapproc_getport client arg =
      _to_PMAP'V2'pmapproc_getport'res (U'C.unbound_sync_call client _program "PMAPPROC_GETPORT" (_of_PMAP'V2'pmapproc_getport'arg arg))
    
    let pmapproc_getport'async client arg pass_reply =
      U'C.unbound_async_call client _program "PMAPPROC_GETPORT" (_of_PMAP'V2'pmapproc_getport'arg arg)
        (fun g -> pass_reply (fun () -> _to_PMAP'V2'pmapproc_getport'res (g())))
      
    
    let pmapproc_dump client arg =
      _to_PMAP'V2'pmapproc_dump'res (U'C.unbound_sync_call client _program "PMAPPROC_DUMP" (_of_PMAP'V2'pmapproc_dump'arg arg))
    
    let pmapproc_dump'async client arg pass_reply =
      U'C.unbound_async_call client _program "PMAPPROC_DUMP" (_of_PMAP'V2'pmapproc_dump'arg arg)
        (fun g -> pass_reply (fun () -> _to_PMAP'V2'pmapproc_dump'res (g())))
      
    
    let pmapproc_callit client arg =
      _to_PMAP'V2'pmapproc_callit'res (U'C.unbound_sync_call client _program "PMAPPROC_CALLIT" (_of_PMAP'V2'pmapproc_callit'arg arg))
    
    let pmapproc_callit'async client arg pass_reply =
      U'C.unbound_async_call client _program "PMAPPROC_CALLIT" (_of_PMAP'V2'pmapproc_callit'arg arg)
        (fun g -> pass_reply (fun () -> _to_PMAP'V2'pmapproc_callit'res (g())))
      
    
    
  end
  
end

module PMAP = struct
  module V2 = struct
    module M'0 = Make'PMAP(Rpc_client)
    include M'0.V2
    open Rpc_portmapper_aux
    let _program = program_PMAP'V2
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
  end
  
end


