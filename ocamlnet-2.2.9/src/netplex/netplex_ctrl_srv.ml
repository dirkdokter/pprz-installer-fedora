(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * netplex_ctrl.x
 *
 ************************************************************)
module Control = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Control'V1
    
    let bind
      ?program_number
      ?version_number
      ~proc_ping
      ~proc_poll
      ~proc_accepted
      srv
      =
        Rpc_server.bind
            ?program_number ?version_number _program 
            [
              (Rpc_server.Sync { Rpc_server.sync_name = "ping";
                                 Rpc_server.sync_proc = (fun x -> _of_Control'V1'ping'res (proc_ping (_to_Control'V1'ping'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "poll";
                                 Rpc_server.sync_proc = (fun x -> _of_Control'V1'poll'res (proc_poll (_to_Control'V1'poll'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "accepted";
                                 Rpc_server.sync_proc = (fun x -> _of_Control'V1'accepted'res (proc_accepted (_to_Control'V1'accepted'arg x)))});
            ]
            srv
    
    let bind_async
      ?program_number
      ?version_number
      ~proc_ping
      ~proc_poll
      ~proc_accepted
      srv
      =
        Rpc_server.bind
            ?program_number ?version_number _program 
            [
              (Rpc_server.Async { Rpc_server.async_name = "ping";
                                  Rpc_server.async_invoke = (fun s x -> proc_ping s (_to_Control'V1'ping'arg x) (fun y -> Rpc_server.reply s (_of_Control'V1'ping'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "poll";
                                  Rpc_server.async_invoke = (fun s x -> proc_poll s (_to_Control'V1'poll'arg x) (fun y -> Rpc_server.reply s (_of_Control'V1'poll'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "accepted";
                                  Rpc_server.async_invoke = (fun s x -> proc_accepted s (_to_Control'V1'accepted'arg x) (fun y -> Rpc_server.reply s (_of_Control'V1'accepted'res y)))});
            ]
            srv
    
    end
  
end
module System = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_System'V1
    
    let bind
      ?program_number
      ?version_number
      ~proc_ping
      ~proc_lookup
      ~proc_send_message
      ~proc_log
      srv
      =
        Rpc_server.bind
            ?program_number ?version_number _program 
            [
              (Rpc_server.Sync { Rpc_server.sync_name = "ping";
                                 Rpc_server.sync_proc = (fun x -> _of_System'V1'ping'res (proc_ping (_to_System'V1'ping'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "lookup";
                                 Rpc_server.sync_proc = (fun x -> _of_System'V1'lookup'res (proc_lookup (_to_System'V1'lookup'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "send_message";
                                 Rpc_server.sync_proc = (fun x -> _of_System'V1'send_message'res (proc_send_message (_to_System'V1'send_message'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "log";
                                 Rpc_server.sync_proc = (fun x -> _of_System'V1'log'res (proc_log (_to_System'V1'log'arg x)))});
            ]
            srv
    
    let bind_async
      ?program_number
      ?version_number
      ~proc_ping
      ~proc_lookup
      ~proc_send_message
      ~proc_log
      srv
      =
        Rpc_server.bind
            ?program_number ?version_number _program 
            [
              (Rpc_server.Async { Rpc_server.async_name = "ping";
                                  Rpc_server.async_invoke = (fun s x -> proc_ping s (_to_System'V1'ping'arg x) (fun y -> Rpc_server.reply s (_of_System'V1'ping'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "lookup";
                                  Rpc_server.async_invoke = (fun s x -> proc_lookup s (_to_System'V1'lookup'arg x) (fun y -> Rpc_server.reply s (_of_System'V1'lookup'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "send_message";
                                  Rpc_server.async_invoke = (fun s x -> proc_send_message s (_to_System'V1'send_message'arg x) (fun y -> Rpc_server.reply s (_of_System'V1'send_message'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "log";
                                  Rpc_server.async_invoke = (fun s x -> proc_log s (_to_System'V1'log'arg x) (fun y -> Rpc_server.reply s (_of_System'V1'log'res y)))});
            ]
            srv
    
    end
  
end
module Admin = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Admin'V1
    
    let bind
      ?program_number
      ?version_number
      ~proc_ping
      ~proc_list
      ~proc_enable
      ~proc_disable
      ~proc_restart
      ~proc_restart_all
      ~proc_shutdown
      ~proc_reopen_logfiles
      ~proc_send_admin_message
      srv
      =
        Rpc_server.bind
            ?program_number ?version_number _program 
            [
              (Rpc_server.Sync { Rpc_server.sync_name = "ping";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'ping'res (proc_ping (_to_Admin'V1'ping'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "list";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'list'res (proc_list (_to_Admin'V1'list'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "enable";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'enable'res (proc_enable (_to_Admin'V1'enable'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "disable";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'disable'res (proc_disable (_to_Admin'V1'disable'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "restart";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'restart'res (proc_restart (_to_Admin'V1'restart'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "restart_all";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'restart_all'res (proc_restart_all (_to_Admin'V1'restart_all'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "shutdown";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'shutdown'res (proc_shutdown (_to_Admin'V1'shutdown'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "reopen_logfiles";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'reopen_logfiles'res (proc_reopen_logfiles (_to_Admin'V1'reopen_logfiles'arg x)))});
              (Rpc_server.Sync { Rpc_server.sync_name = "send_admin_message";
                                 Rpc_server.sync_proc = (fun x -> _of_Admin'V1'send_admin_message'res (proc_send_admin_message (_to_Admin'V1'send_admin_message'arg x)))});
            ]
            srv
    
    let bind_async
      ?program_number
      ?version_number
      ~proc_ping
      ~proc_list
      ~proc_enable
      ~proc_disable
      ~proc_restart
      ~proc_restart_all
      ~proc_shutdown
      ~proc_reopen_logfiles
      ~proc_send_admin_message
      srv
      =
        Rpc_server.bind
            ?program_number ?version_number _program 
            [
              (Rpc_server.Async { Rpc_server.async_name = "ping";
                                  Rpc_server.async_invoke = (fun s x -> proc_ping s (_to_Admin'V1'ping'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'ping'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "list";
                                  Rpc_server.async_invoke = (fun s x -> proc_list s (_to_Admin'V1'list'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'list'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "enable";
                                  Rpc_server.async_invoke = (fun s x -> proc_enable s (_to_Admin'V1'enable'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'enable'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "disable";
                                  Rpc_server.async_invoke = (fun s x -> proc_disable s (_to_Admin'V1'disable'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'disable'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "restart";
                                  Rpc_server.async_invoke = (fun s x -> proc_restart s (_to_Admin'V1'restart'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'restart'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "restart_all";
                                  Rpc_server.async_invoke = (fun s x -> proc_restart_all s (_to_Admin'V1'restart_all'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'restart_all'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "shutdown";
                                  Rpc_server.async_invoke = (fun s x -> proc_shutdown s (_to_Admin'V1'shutdown'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'shutdown'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "reopen_logfiles";
                                  Rpc_server.async_invoke = (fun s x -> proc_reopen_logfiles s (_to_Admin'V1'reopen_logfiles'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'reopen_logfiles'res y)))});
              (Rpc_server.Async { Rpc_server.async_name = "send_admin_message";
                                  Rpc_server.async_invoke = (fun s x -> proc_send_admin_message s (_to_Admin'V1'send_admin_message'arg x) (fun y -> Rpc_server.reply s (_of_Admin'V1'send_admin_message'res y)))});
            ]
            srv
    
    end
  
end

