(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * netplex_ctrl.x
 *
 ************************************************************)
module Control : sig
  module V1 : sig
    open Netplex_ctrl_aux
    val create_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.connector ->
            Rpc.protocol ->
            Rpc_client.t
    val create_portmapped_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            string ->
            Rpc.protocol ->
            Rpc_client.t
    val create_client2 :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.mode2 ->
            Rpc_client.t
    val ping : Rpc_client.t -> t_Control'V1'ping'arg -> t_Control'V1'ping'res
    val ping'async :
            Rpc_client.t ->
            t_Control'V1'ping'arg ->
            ((unit -> t_Control'V1'ping'res) -> unit) ->
            unit
    val poll : Rpc_client.t -> t_Control'V1'poll'arg -> t_Control'V1'poll'res
    val poll'async :
            Rpc_client.t ->
            t_Control'V1'poll'arg ->
            ((unit -> t_Control'V1'poll'res) -> unit) ->
            unit
    val accepted :
            Rpc_client.t ->
            t_Control'V1'accepted'arg ->
            t_Control'V1'accepted'res
    val accepted'async :
            Rpc_client.t ->
            t_Control'V1'accepted'arg ->
            ((unit -> t_Control'V1'accepted'res) -> unit) ->
            unit
    
  end
  
end

module System : sig
  module V1 : sig
    open Netplex_ctrl_aux
    val create_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.connector ->
            Rpc.protocol ->
            Rpc_client.t
    val create_portmapped_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            string ->
            Rpc.protocol ->
            Rpc_client.t
    val create_client2 :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.mode2 ->
            Rpc_client.t
    val ping : Rpc_client.t -> t_System'V1'ping'arg -> t_System'V1'ping'res
    val ping'async :
            Rpc_client.t ->
            t_System'V1'ping'arg ->
            ((unit -> t_System'V1'ping'res) -> unit) ->
            unit
    val lookup :
            Rpc_client.t ->
            t_System'V1'lookup'arg ->
            t_System'V1'lookup'res
    val lookup'async :
            Rpc_client.t ->
            t_System'V1'lookup'arg ->
            ((unit -> t_System'V1'lookup'res) -> unit) ->
            unit
    val send_message :
            Rpc_client.t ->
            t_System'V1'send_message'arg ->
            t_System'V1'send_message'res
    val send_message'async :
            Rpc_client.t ->
            t_System'V1'send_message'arg ->
            ((unit -> t_System'V1'send_message'res) -> unit) ->
            unit
    val log : Rpc_client.t -> t_System'V1'log'arg -> t_System'V1'log'res
    val log'async :
            Rpc_client.t ->
            t_System'V1'log'arg ->
            ((unit -> t_System'V1'log'res) -> unit) ->
            unit
    
  end
  
end

module Admin : sig
  module V1 : sig
    open Netplex_ctrl_aux
    val create_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.connector ->
            Rpc.protocol ->
            Rpc_client.t
    val create_portmapped_client :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            string ->
            Rpc.protocol ->
            Rpc_client.t
    val create_client2 :
            ?esys:Unixqueue.event_system ->
            ?program_number:Rtypes.uint4 -> 
            ?version_number:Rtypes.uint4 -> 
            Rpc_client.mode2 ->
            Rpc_client.t
    val ping : Rpc_client.t -> t_Admin'V1'ping'arg -> t_Admin'V1'ping'res
    val ping'async :
            Rpc_client.t ->
            t_Admin'V1'ping'arg ->
            ((unit -> t_Admin'V1'ping'res) -> unit) ->
            unit
    val list : Rpc_client.t -> t_Admin'V1'list'arg -> t_Admin'V1'list'res
    val list'async :
            Rpc_client.t ->
            t_Admin'V1'list'arg ->
            ((unit -> t_Admin'V1'list'res) -> unit) ->
            unit
    val enable :
            Rpc_client.t ->
            t_Admin'V1'enable'arg ->
            t_Admin'V1'enable'res
    val enable'async :
            Rpc_client.t ->
            t_Admin'V1'enable'arg ->
            ((unit -> t_Admin'V1'enable'res) -> unit) ->
            unit
    val disable :
            Rpc_client.t ->
            t_Admin'V1'disable'arg ->
            t_Admin'V1'disable'res
    val disable'async :
            Rpc_client.t ->
            t_Admin'V1'disable'arg ->
            ((unit -> t_Admin'V1'disable'res) -> unit) ->
            unit
    val restart :
            Rpc_client.t ->
            t_Admin'V1'restart'arg ->
            t_Admin'V1'restart'res
    val restart'async :
            Rpc_client.t ->
            t_Admin'V1'restart'arg ->
            ((unit -> t_Admin'V1'restart'res) -> unit) ->
            unit
    val restart_all :
            Rpc_client.t ->
            t_Admin'V1'restart_all'arg ->
            t_Admin'V1'restart_all'res
    val restart_all'async :
            Rpc_client.t ->
            t_Admin'V1'restart_all'arg ->
            ((unit -> t_Admin'V1'restart_all'res) -> unit) ->
            unit
    val shutdown :
            Rpc_client.t ->
            t_Admin'V1'shutdown'arg ->
            t_Admin'V1'shutdown'res
    val shutdown'async :
            Rpc_client.t ->
            t_Admin'V1'shutdown'arg ->
            ((unit -> t_Admin'V1'shutdown'res) -> unit) ->
            unit
    val reopen_logfiles :
            Rpc_client.t ->
            t_Admin'V1'reopen_logfiles'arg ->
            t_Admin'V1'reopen_logfiles'res
    val reopen_logfiles'async :
            Rpc_client.t ->
            t_Admin'V1'reopen_logfiles'arg ->
            ((unit -> t_Admin'V1'reopen_logfiles'res) -> unit) ->
            unit
    val send_admin_message :
            Rpc_client.t ->
            t_Admin'V1'send_admin_message'arg ->
            t_Admin'V1'send_admin_message'res
    val send_admin_message'async :
            Rpc_client.t ->
            t_Admin'V1'send_admin_message'arg ->
            ((unit -> t_Admin'V1'send_admin_message'res) -> unit) ->
            unit
    
  end
  
end


