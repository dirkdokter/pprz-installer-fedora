(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * netplex_ctrl.x
 *
 ************************************************************)
type longstring = 
      string
and internal_port = 
      longstring option
and message = 
      { 
        mutable msg_name : longstring;
        mutable msg_arguments : longstring array;
      }
and socket_id = 
      { 
        mutable sock_protocol : longstring;
        mutable sock_index : int;
      }
and socket_id_list = 
      socket_id array
and event_type = 
      Rtypes.int4
and event = 
      [ 
      | `event_none 
      | `event_accept 
      | `event_noaccept 
      | `event_received_message of (message) 
      | `event_received_admin_message of (message) 
      | `event_shutdown 
      ]
and level = 
      Rtypes.int4
and t_Control'V1'ping'arg = 
      unit
and t_Control'V1'ping'res = 
      unit
and t_Control'V1'poll'arg = 
      int
and t_Control'V1'poll'res = 
      event
and t_Control'V1'accepted'arg = 
      unit
and t_Control'V1'accepted'res = 
      unit
and t_System'V1'ping'arg = 
      unit
and t_System'V1'ping'res = 
      unit
and t_System'V1'lookup'arg = 
      ( longstring * longstring )
and t_System'V1'lookup'res = 
      internal_port
and t_System'V1'send_message'arg = 
      ( longstring * message )
and t_System'V1'send_message'res = 
      unit
and t_System'V1'log'arg = 
      ( level * longstring )
and t_System'V1'log'res = 
      unit
and result_code = 
      Rtypes.int4
and unit_result = 
      [ | `code_ok | `code_error of (longstring) ]
and socket_domain = 
      Rtypes.int4
and port = 
      [ 
      | `pf_unknown 
      | `pf_unix of (longstring) 
      | `pf_inet of (_t0) 
      | `pf_inet6 of (_t1) 
      ]
and port_list = 
      port array
and prot = 
      { 
        mutable prot_name : longstring;
        mutable prot_ports : port_list;
      }
and prot_list = 
      prot array
and srv_state = 
      Rtypes.int4
and service = 
      { 
        mutable srv_name : longstring;
        mutable srv_protocols : prot_list;
        mutable srv_nr_containers : int;
        mutable srv_state : srv_state;
      }
and service_list = 
      service array
and t_Admin'V1'ping'arg = 
      unit
and t_Admin'V1'ping'res = 
      unit
and t_Admin'V1'list'arg = 
      unit
and t_Admin'V1'list'res = 
      service_list
and t_Admin'V1'enable'arg = 
      longstring
and t_Admin'V1'enable'res = 
      unit_result
and t_Admin'V1'disable'arg = 
      longstring
and t_Admin'V1'disable'res = 
      unit_result
and t_Admin'V1'restart'arg = 
      longstring
and t_Admin'V1'restart'res = 
      unit_result
and t_Admin'V1'restart_all'arg = 
      unit
and t_Admin'V1'restart_all'res = 
      unit_result
and t_Admin'V1'shutdown'arg = 
      unit
and t_Admin'V1'shutdown'res = 
      unit_result
and t_Admin'V1'reopen_logfiles'arg = 
      unit
and t_Admin'V1'reopen_logfiles'res = 
      unit_result
and t_Admin'V1'send_admin_message'arg = 
      ( longstring * message )
and t_Admin'V1'send_admin_message'res = 
      unit
and _t0 = 
      { 
        mutable inet_addr : longstring;
        mutable inet_port : int;
      }
and _t1 = 
      { 
        mutable inet6_addr : longstring;
        mutable inet6_port : int;
      }
;;
let event_none = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let event_accept = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let event_noaccept = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let event_received_message = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let event_received_admin_message = (Rtypes.mk_int4('\000','\000','\000','\004'));;
let event_shutdown = (Rtypes.mk_int4('\000','\000','\000','\005'));;
let log_emerg = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let log_alert = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let log_crit = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let log_err = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let log_warning = (Rtypes.mk_int4('\000','\000','\000','\004'));;
let log_notice = (Rtypes.mk_int4('\000','\000','\000','\005'));;
let log_info = (Rtypes.mk_int4('\000','\000','\000','\006'));;
let log_debug = (Rtypes.mk_int4('\000','\000','\000','\007'));;
let code_ok = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let code_error = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let pf_unknown = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let pf_unix = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let pf_inet = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let pf_inet6 = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let state_enabled = (Rtypes.mk_int4('\000','\000','\000','\000'));;
let state_disabled = (Rtypes.mk_int4('\000','\000','\000','\001'));;
let state_restarting = (Rtypes.mk_int4('\000','\000','\000','\002'));;
let state_down = (Rtypes.mk_int4('\000','\000','\000','\003'));;
let rec _to_longstring (x:Xdr.xdr_value) : longstring =
  (Xdr.dest_xv_string x)
and _of_longstring (x:longstring) : Xdr.xdr_value = (Xdr.XV_string x)
and _to_internal_port (x:Xdr.xdr_value) : internal_port =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, _) -> None
  | (1, x) -> Some (_to_longstring x)
  | _ -> assert false)
and _of_internal_port (x:internal_port) : Xdr.xdr_value =
  (match x with
  | None   -> Xdr.xv_none
  | Some x -> Xdr.xv_some (_of_longstring x)
  )
and _to_message (x:Xdr.xdr_value) : message =
  (let s = Xdr.dest_xv_struct_fast x in
     { msg_name = (fun x -> (_to_longstring x)) s.(0); 
       msg_arguments = (fun x -> (Array.map
                                   (fun x -> (_to_longstring x))
                                 (Xdr.dest_xv_array x)))
                       s.(1); 
     })
and _of_message (x:message) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.msg_name in (_of_longstring x));
       (let x = x.msg_arguments in
         Xdr.XV_array (Array.map (fun x -> (_of_longstring x)) x));
     |])
and _to_socket_id (x:Xdr.xdr_value) : socket_id =
  (let s = Xdr.dest_xv_struct_fast x in
     { sock_protocol = (fun x -> (_to_longstring x)) s.(0); 
       sock_index = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x))) s.(1); 
     })
and _of_socket_id (x:socket_id) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.sock_protocol in (_of_longstring x));
       (let x = x.sock_index in (Xdr.XV_int (Rtypes.int4_of_int x)));
     |])
and _to_socket_id_list (x:Xdr.xdr_value) : socket_id_list =
  (Array.map (fun x -> (_to_socket_id x)) (Xdr.dest_xv_array x))
and _of_socket_id_list (x:socket_id_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_socket_id x)) x)
and _to_event_type (x:Xdr.xdr_value) : event_type =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | 4 -> (Rtypes.mk_int4('\000','\000','\000','\004'))
  | 5 -> (Rtypes.mk_int4('\000','\000','\000','\005'))
  | _ -> assert false
  )
and _of_event_type (x:event_type) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | ('\000','\000','\000','\004') -> Xdr.XV_enum_fast 4
  | ('\000','\000','\000','\005') -> Xdr.XV_enum_fast 5
  | _ -> failwith "RPC/XDR error: invalid enum value for type `event_type'"
  )
and _to_event (x:Xdr.xdr_value) : event =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `event_none 
  | (1, x) -> `event_accept 
  | (2, x) -> `event_noaccept 
  | (3, x) -> `event_received_message (_to_message x)
  | (4, x) -> `event_received_admin_message (_to_message x)
  | (5, x) -> `event_shutdown 
  | _ -> assert false
  :> [
     | `event_none
     | `event_accept
     | `event_noaccept
     | `event_received_message of _
     | `event_received_admin_message of _
     | `event_shutdown
     ]
  )
and _of_event (x:event) : Xdr.xdr_value =
  (match x with
  | `event_none -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `event_accept -> Xdr.XV_union_over_enum_fast(1, Xdr.XV_void)
  | `event_noaccept -> Xdr.XV_union_over_enum_fast(2, Xdr.XV_void)
  | `event_received_message x ->
        Xdr.XV_union_over_enum_fast(3, (_of_message x))
  | `event_received_admin_message x ->
        Xdr.XV_union_over_enum_fast(4, (_of_message x))
  | `event_shutdown -> Xdr.XV_union_over_enum_fast(5, Xdr.XV_void))
and _to_level (x:Xdr.xdr_value) : level =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | 4 -> (Rtypes.mk_int4('\000','\000','\000','\004'))
  | 5 -> (Rtypes.mk_int4('\000','\000','\000','\005'))
  | 6 -> (Rtypes.mk_int4('\000','\000','\000','\006'))
  | 7 -> (Rtypes.mk_int4('\000','\000','\000','\007'))
  | _ -> assert false
  )
and _of_level (x:level) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | ('\000','\000','\000','\004') -> Xdr.XV_enum_fast 4
  | ('\000','\000','\000','\005') -> Xdr.XV_enum_fast 5
  | ('\000','\000','\000','\006') -> Xdr.XV_enum_fast 6
  | ('\000','\000','\000','\007') -> Xdr.XV_enum_fast 7
  | _ -> failwith "RPC/XDR error: invalid enum value for type `level'"
  )
and _to_Control'V1'ping'arg (x:Xdr.xdr_value) : t_Control'V1'ping'arg = ()
and _of_Control'V1'ping'arg (x:t_Control'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Control'V1'ping'res (x:Xdr.xdr_value) : t_Control'V1'ping'res = ()
and _of_Control'V1'ping'res (x:t_Control'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Control'V1'poll'arg (x:Xdr.xdr_value) : t_Control'V1'poll'arg =
  (Rtypes.int_of_int4 (Xdr.dest_xv_int x))
and _of_Control'V1'poll'arg (x:t_Control'V1'poll'arg) : Xdr.xdr_value =
  (Xdr.XV_int (Rtypes.int4_of_int x))
and _to_Control'V1'poll'res (x:Xdr.xdr_value) : t_Control'V1'poll'res =
  (_to_event x)
and _of_Control'V1'poll'res (x:t_Control'V1'poll'res) : Xdr.xdr_value =
  (_of_event x)
and _to_Control'V1'accepted'arg (x:Xdr.xdr_value) : t_Control'V1'accepted'arg =
  ()
and _of_Control'V1'accepted'arg (x:t_Control'V1'accepted'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Control'V1'accepted'res (x:Xdr.xdr_value) : t_Control'V1'accepted'res =
  ()
and _of_Control'V1'accepted'res (x:t_Control'V1'accepted'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'ping'arg (x:Xdr.xdr_value) : t_System'V1'ping'arg = ()
and _of_System'V1'ping'arg (x:t_System'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'ping'res (x:Xdr.xdr_value) : t_System'V1'ping'res = ()
and _of_System'V1'ping'res (x:t_System'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'lookup'arg (x:Xdr.xdr_value) : t_System'V1'lookup'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), 
       (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_System'V1'lookup'arg (x:t_System'V1'lookup'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_longstring x1)); |]
   )
and _to_System'V1'lookup'res (x:Xdr.xdr_value) : t_System'V1'lookup'res =
  (_to_internal_port x)
and _of_System'V1'lookup'res (x:t_System'V1'lookup'res) : Xdr.xdr_value =
  (_of_internal_port x)
and _to_System'V1'send_message'arg (x:Xdr.xdr_value) : t_System'V1'send_message'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), (fun x -> (_to_message x)) s.(1)
     ))
and _of_System'V1'send_message'arg (x:t_System'V1'send_message'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_message x1)); |]
   )
and _to_System'V1'send_message'res (x:Xdr.xdr_value) : t_System'V1'send_message'res =
  ()
and _of_System'V1'send_message'res (x:t_System'V1'send_message'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_System'V1'log'arg (x:Xdr.xdr_value) : t_System'V1'log'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_level x)) s.(0), (fun x -> (_to_longstring x)) s.(1)
     ))
and _of_System'V1'log'arg (x:t_System'V1'log'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_level x0));   ((_of_longstring x1)); |]
   )
and _to_System'V1'log'res (x:Xdr.xdr_value) : t_System'V1'log'res = ()
and _of_System'V1'log'res (x:t_System'V1'log'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_result_code (x:Xdr.xdr_value) : result_code =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | _ -> assert false
  )
and _of_result_code (x:result_code) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | _ -> failwith "RPC/XDR error: invalid enum value for type `result_code'"
  )
and _to_unit_result (x:Xdr.xdr_value) : unit_result =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `code_ok 
  | (1, x) -> `code_error (_to_longstring x)
  | _ -> assert false
  :> [ | `code_ok | `code_error of _ ]
  )
and _of_unit_result (x:unit_result) : Xdr.xdr_value =
  (match x with
  | `code_ok -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `code_error x -> Xdr.XV_union_over_enum_fast(1, (_of_longstring x)))
and _to_socket_domain (x:Xdr.xdr_value) : socket_domain =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | _ -> assert false
  )
and _of_socket_domain (x:socket_domain) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | _ -> failwith "RPC/XDR error: invalid enum value for type `socket_domain'"
  )
and _to_port (x:Xdr.xdr_value) : port =
  (match Xdr.dest_xv_union_over_enum_fast x with
  | (0, x) -> `pf_unknown 
  | (1, x) -> `pf_unix (_to_longstring x)
  | (2, x) ->
        `pf_inet (let s = Xdr.dest_xv_struct_fast x in
                    { inet_addr = (fun x -> (_to_longstring x)) s.(0); 
                      inet_port = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x)))
                                  s.(1); 
                    })
  | (3, x) ->
        `pf_inet6 (let s = Xdr.dest_xv_struct_fast x in
                     { inet6_addr = (fun x -> (_to_longstring x)) s.(0); 
                       inet6_port = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x)))
                                    s.(1); 
                     })
  | _ -> assert false
  :> [ | `pf_unknown | `pf_unix of _ | `pf_inet of _ | `pf_inet6 of _ ]
  )
and _of_port (x:port) : Xdr.xdr_value =
  (match x with
  | `pf_unknown -> Xdr.XV_union_over_enum_fast(0, Xdr.XV_void)
  | `pf_unix x -> Xdr.XV_union_over_enum_fast(1, (_of_longstring x))
  | `pf_inet x ->
        Xdr.XV_union_over_enum_fast(2,
          (Xdr.XV_struct_fast
             [|
               (let x = x.inet_addr in (_of_longstring x));
               (let x = x.inet_port in (Xdr.XV_int (Rtypes.int4_of_int x)));
             |]))
  | `pf_inet6 x ->
        Xdr.XV_union_over_enum_fast(3,
          (Xdr.XV_struct_fast
             [|
               (let x = x.inet6_addr in (_of_longstring x));
               (let x = x.inet6_port in (Xdr.XV_int (Rtypes.int4_of_int x)));
             |])))
and _to_port_list (x:Xdr.xdr_value) : port_list =
  (Array.map (fun x -> (_to_port x)) (Xdr.dest_xv_array x))
and _of_port_list (x:port_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_port x)) x)
and _to_prot (x:Xdr.xdr_value) : prot =
  (let s = Xdr.dest_xv_struct_fast x in
     { prot_name = (fun x -> (_to_longstring x)) s.(0); 
       prot_ports = (fun x -> (_to_port_list x)) s.(1); 
     })
and _of_prot (x:prot) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.prot_name in (_of_longstring x));
       (let x = x.prot_ports in (_of_port_list x));
     |])
and _to_prot_list (x:Xdr.xdr_value) : prot_list =
  (Array.map (fun x -> (_to_prot x)) (Xdr.dest_xv_array x))
and _of_prot_list (x:prot_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_prot x)) x)
and _to_srv_state (x:Xdr.xdr_value) : srv_state =
  (match Xdr.dest_xv_enum_fast x with
  | 0 -> (Rtypes.mk_int4('\000','\000','\000','\000'))
  | 1 -> (Rtypes.mk_int4('\000','\000','\000','\001'))
  | 2 -> (Rtypes.mk_int4('\000','\000','\000','\002'))
  | 3 -> (Rtypes.mk_int4('\000','\000','\000','\003'))
  | _ -> assert false
  )
and _of_srv_state (x:srv_state) : Xdr.xdr_value =
  (match Rtypes.dest_int4 x with
  | ('\000','\000','\000','\000') -> Xdr.XV_enum_fast 0
  | ('\000','\000','\000','\001') -> Xdr.XV_enum_fast 1
  | ('\000','\000','\000','\002') -> Xdr.XV_enum_fast 2
  | ('\000','\000','\000','\003') -> Xdr.XV_enum_fast 3
  | _ -> failwith "RPC/XDR error: invalid enum value for type `srv_state'"
  )
and _to_service (x:Xdr.xdr_value) : service =
  (let s = Xdr.dest_xv_struct_fast x in
     { srv_name = (fun x -> (_to_longstring x)) s.(0); 
       srv_protocols = (fun x -> (_to_prot_list x)) s.(1); 
       srv_nr_containers = (fun x -> (Rtypes.int_of_int4 (Xdr.dest_xv_int x)))
                           s.(2); 
       srv_state = (fun x -> (_to_srv_state x)) s.(3); 
     })
and _of_service (x:service) : Xdr.xdr_value =
  (Xdr.XV_struct_fast
     [|
       (let x = x.srv_name in (_of_longstring x));
       (let x = x.srv_protocols in (_of_prot_list x));
       (let x = x.srv_nr_containers in (Xdr.XV_int (Rtypes.int4_of_int x)));
       (let x = x.srv_state in (_of_srv_state x));
     |])
and _to_service_list (x:Xdr.xdr_value) : service_list =
  (Array.map (fun x -> (_to_service x)) (Xdr.dest_xv_array x))
and _of_service_list (x:service_list) : Xdr.xdr_value =
  Xdr.XV_array (Array.map (fun x -> (_of_service x)) x)
and _to_Admin'V1'ping'arg (x:Xdr.xdr_value) : t_Admin'V1'ping'arg = ()
and _of_Admin'V1'ping'arg (x:t_Admin'V1'ping'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V1'ping'res (x:Xdr.xdr_value) : t_Admin'V1'ping'res = ()
and _of_Admin'V1'ping'res (x:t_Admin'V1'ping'res) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V1'list'arg (x:Xdr.xdr_value) : t_Admin'V1'list'arg = ()
and _of_Admin'V1'list'arg (x:t_Admin'V1'list'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V1'list'res (x:Xdr.xdr_value) : t_Admin'V1'list'res =
  (_to_service_list x)
and _of_Admin'V1'list'res (x:t_Admin'V1'list'res) : Xdr.xdr_value =
  (_of_service_list x)
and _to_Admin'V1'enable'arg (x:Xdr.xdr_value) : t_Admin'V1'enable'arg =
  (_to_longstring x)
and _of_Admin'V1'enable'arg (x:t_Admin'V1'enable'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Admin'V1'enable'res (x:Xdr.xdr_value) : t_Admin'V1'enable'res =
  (_to_unit_result x)
and _of_Admin'V1'enable'res (x:t_Admin'V1'enable'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V1'disable'arg (x:Xdr.xdr_value) : t_Admin'V1'disable'arg =
  (_to_longstring x)
and _of_Admin'V1'disable'arg (x:t_Admin'V1'disable'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Admin'V1'disable'res (x:Xdr.xdr_value) : t_Admin'V1'disable'res =
  (_to_unit_result x)
and _of_Admin'V1'disable'res (x:t_Admin'V1'disable'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V1'restart'arg (x:Xdr.xdr_value) : t_Admin'V1'restart'arg =
  (_to_longstring x)
and _of_Admin'V1'restart'arg (x:t_Admin'V1'restart'arg) : Xdr.xdr_value =
  (_of_longstring x)
and _to_Admin'V1'restart'res (x:Xdr.xdr_value) : t_Admin'V1'restart'res =
  (_to_unit_result x)
and _of_Admin'V1'restart'res (x:t_Admin'V1'restart'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V1'restart_all'arg (x:Xdr.xdr_value) : t_Admin'V1'restart_all'arg =
  ()
and _of_Admin'V1'restart_all'arg (x:t_Admin'V1'restart_all'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V1'restart_all'res (x:Xdr.xdr_value) : t_Admin'V1'restart_all'res =
  (_to_unit_result x)
and _of_Admin'V1'restart_all'res (x:t_Admin'V1'restart_all'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V1'shutdown'arg (x:Xdr.xdr_value) : t_Admin'V1'shutdown'arg =
  ()
and _of_Admin'V1'shutdown'arg (x:t_Admin'V1'shutdown'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V1'shutdown'res (x:Xdr.xdr_value) : t_Admin'V1'shutdown'res =
  (_to_unit_result x)
and _of_Admin'V1'shutdown'res (x:t_Admin'V1'shutdown'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V1'reopen_logfiles'arg (x:Xdr.xdr_value) : t_Admin'V1'reopen_logfiles'arg =
  ()
and _of_Admin'V1'reopen_logfiles'arg (x:t_Admin'V1'reopen_logfiles'arg) : Xdr.xdr_value =
  Xdr.XV_void
and _to_Admin'V1'reopen_logfiles'res (x:Xdr.xdr_value) : t_Admin'V1'reopen_logfiles'res =
  (_to_unit_result x)
and _of_Admin'V1'reopen_logfiles'res (x:t_Admin'V1'reopen_logfiles'res) : Xdr.xdr_value =
  (_of_unit_result x)
and _to_Admin'V1'send_admin_message'arg (x:Xdr.xdr_value) : t_Admin'V1'send_admin_message'arg =
  (let s = Xdr.dest_xv_struct_fast x in
     ( (fun x -> (_to_longstring x)) s.(0), (fun x -> (_to_message x)) s.(1)
     ))
and _of_Admin'V1'send_admin_message'arg (x:t_Admin'V1'send_admin_message'arg) : Xdr.xdr_value =
  (let (x0, x1) = x in
   Xdr.XV_struct_fast [|   ((_of_longstring x0));   ((_of_message x1)); |]
   )
and _to_Admin'V1'send_admin_message'res (x:Xdr.xdr_value) : t_Admin'V1'send_admin_message'res =
  ()
and _of_Admin'V1'send_admin_message'res (x:t_Admin'V1'send_admin_message'res) : Xdr.xdr_value =
  Xdr.XV_void
;;
let xdrt_longstring = Xdr.X_rec("longstring", Xdr.x_string_max)
;;
let xdrt_internal_port =
  Xdr.X_rec("internal_port", Xdr.x_optional (xdrt_longstring))
;;
let xdrt_message =
  Xdr.X_rec("message",
    Xdr.X_struct
      [
        ("msg_name", (xdrt_longstring));
        ("msg_arguments", (Xdr.x_array_max (xdrt_longstring)));
      ])
;;
let xdrt_socket_id =
  Xdr.X_rec("socket_id",
    Xdr.X_struct
      [
        ("sock_protocol", (xdrt_longstring));
        ("sock_index", (Xdr.X_int));
      ])
;;
let xdrt_socket_id_list =
  Xdr.X_rec("socket_id_list", Xdr.x_array_max (xdrt_socket_id))
;;
let xdrt_event_type =
  Xdr.X_rec("event_type",
    Xdr.X_enum
      [
        ("EVENT_NONE", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("EVENT_ACCEPT", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("EVENT_NOACCEPT", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("EVENT_RECEIVED_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\003')));
        ("EVENT_RECEIVED_ADMIN_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\004')));
        ("EVENT_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\005')));
      ])
;;
let xdrt_event =
  Xdr.X_rec("event",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("EVENT_NONE", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("EVENT_ACCEPT", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("EVENT_NOACCEPT", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("EVENT_RECEIVED_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\003')));
           ("EVENT_RECEIVED_ADMIN_MESSAGE", (Rtypes.mk_int4('\000','\000','\000','\004')));
           ("EVENT_SHUTDOWN", (Rtypes.mk_int4('\000','\000','\000','\005')));
         ]),
      [
        "EVENT_NONE", (Xdr.X_void);
        "EVENT_ACCEPT", (Xdr.X_void);
        "EVENT_NOACCEPT", (Xdr.X_void);
        "EVENT_RECEIVED_MESSAGE", (xdrt_message);
        "EVENT_RECEIVED_ADMIN_MESSAGE", (xdrt_message);
        "EVENT_SHUTDOWN", (Xdr.X_void);
      ],
      None))
;;
let xdrt_level =
  Xdr.X_rec("level",
    Xdr.X_enum
      [
        ("LOG_EMERG", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("LOG_ALERT", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("LOG_CRIT", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("LOG_ERR", (Rtypes.mk_int4('\000','\000','\000','\003')));
        ("LOG_WARNING", (Rtypes.mk_int4('\000','\000','\000','\004')));
        ("LOG_NOTICE", (Rtypes.mk_int4('\000','\000','\000','\005')));
        ("LOG_INFO", (Rtypes.mk_int4('\000','\000','\000','\006')));
        ("LOG_DEBUG", (Rtypes.mk_int4('\000','\000','\000','\007')));
      ])
;;
let xdrt_Control'V1'ping'arg = Xdr.X_void
;;
let xdrt_Control'V1'ping'res = Xdr.X_void
;;
let xdrt_Control'V1'poll'arg = Xdr.X_int
;;
let xdrt_Control'V1'poll'res = xdrt_event
;;
let xdrt_Control'V1'accepted'arg = Xdr.X_void
;;
let xdrt_Control'V1'accepted'res = Xdr.X_void
;;
let xdrt_System'V1'ping'arg = Xdr.X_void
;;
let xdrt_System'V1'ping'res = Xdr.X_void
;;
let xdrt_System'V1'lookup'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_longstring); ]
;;
let xdrt_System'V1'lookup'res = xdrt_internal_port
;;
let xdrt_System'V1'send_message'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_message); ]
;;
let xdrt_System'V1'send_message'res = Xdr.X_void
;;
let xdrt_System'V1'log'arg =
  Xdr.X_struct [   ("0", xdrt_level);   ("1", xdrt_longstring); ]
;;
let xdrt_System'V1'log'res = Xdr.X_void
;;
let xdrt_result_code =
  Xdr.X_rec("result_code",
    Xdr.X_enum
      [
        ("CODE_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("CODE_ERROR", (Rtypes.mk_int4('\000','\000','\000','\001')));
      ])
;;
let xdrt_unit_result =
  Xdr.X_rec("unit_result",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("CODE_OK", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("CODE_ERROR", (Rtypes.mk_int4('\000','\000','\000','\001')));
         ]),
      [
        "CODE_OK", (Xdr.X_void);
        "CODE_ERROR", (xdrt_longstring);
      ],
      None))
;;
let xdrt_socket_domain =
  Xdr.X_rec("socket_domain",
    Xdr.X_enum
      [
        ("PF_UNKNOWN", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("PF_UNIX", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("PF_INET", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("PF_INET6", (Rtypes.mk_int4('\000','\000','\000','\003')));
      ])
;;
let xdrt_port =
  Xdr.X_rec("port",
    Xdr.X_union_over_enum(
      (Xdr.X_enum
         [
           ("PF_UNKNOWN", (Rtypes.mk_int4('\000','\000','\000','\000')));
           ("PF_UNIX", (Rtypes.mk_int4('\000','\000','\000','\001')));
           ("PF_INET", (Rtypes.mk_int4('\000','\000','\000','\002')));
           ("PF_INET6", (Rtypes.mk_int4('\000','\000','\000','\003')));
         ]),
      [
        "PF_UNKNOWN", (Xdr.X_void);
        "PF_UNIX", (xdrt_longstring);
        "PF_INET",
          (Xdr.X_struct
             [
               ("inet_addr", (xdrt_longstring));
               ("inet_port", (Xdr.X_int));
             ]);
        "PF_INET6",
          (Xdr.X_struct
             [
               ("inet6_addr", (xdrt_longstring));
               ("inet6_port", (Xdr.X_int));
             ]);
      ],
      None))
;;
let xdrt_port_list = Xdr.X_rec("port_list", Xdr.x_array_max (xdrt_port))
;;
let xdrt_prot =
  Xdr.X_rec("prot",
    Xdr.X_struct
      [
        ("prot_name", (xdrt_longstring));
        ("prot_ports", (xdrt_port_list));
      ])
;;
let xdrt_prot_list = Xdr.X_rec("prot_list", Xdr.x_array_max (xdrt_prot))
;;
let xdrt_srv_state =
  Xdr.X_rec("srv_state",
    Xdr.X_enum
      [
        ("STATE_ENABLED", (Rtypes.mk_int4('\000','\000','\000','\000')));
        ("STATE_DISABLED", (Rtypes.mk_int4('\000','\000','\000','\001')));
        ("STATE_RESTARTING", (Rtypes.mk_int4('\000','\000','\000','\002')));
        ("STATE_DOWN", (Rtypes.mk_int4('\000','\000','\000','\003')));
      ])
;;
let xdrt_service =
  Xdr.X_rec("service",
    Xdr.X_struct
      [
        ("srv_name", (xdrt_longstring));
        ("srv_protocols", (xdrt_prot_list));
        ("srv_nr_containers", (Xdr.X_int));
        ("srv_state", (xdrt_srv_state));
      ])
;;
let xdrt_service_list =
  Xdr.X_rec("service_list", Xdr.x_array_max (xdrt_service))
;;
let xdrt_Admin'V1'ping'arg = Xdr.X_void
;;
let xdrt_Admin'V1'ping'res = Xdr.X_void
;;
let xdrt_Admin'V1'list'arg = Xdr.X_void
;;
let xdrt_Admin'V1'list'res = xdrt_service_list
;;
let xdrt_Admin'V1'enable'arg = xdrt_longstring
;;
let xdrt_Admin'V1'enable'res = xdrt_unit_result
;;
let xdrt_Admin'V1'disable'arg = xdrt_longstring
;;
let xdrt_Admin'V1'disable'res = xdrt_unit_result
;;
let xdrt_Admin'V1'restart'arg = xdrt_longstring
;;
let xdrt_Admin'V1'restart'res = xdrt_unit_result
;;
let xdrt_Admin'V1'restart_all'arg = Xdr.X_void
;;
let xdrt_Admin'V1'restart_all'res = xdrt_unit_result
;;
let xdrt_Admin'V1'shutdown'arg = Xdr.X_void
;;
let xdrt_Admin'V1'shutdown'res = xdrt_unit_result
;;
let xdrt_Admin'V1'reopen_logfiles'arg = Xdr.X_void
;;
let xdrt_Admin'V1'reopen_logfiles'res = xdrt_unit_result
;;
let xdrt_Admin'V1'send_admin_message'arg =
  Xdr.X_struct [   ("0", xdrt_longstring);   ("1", xdrt_message); ]
;;
let xdrt_Admin'V1'send_admin_message'res = Xdr.X_void
;;
let program_Control'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_Control'V1'ping'arg,
        xdrt_Control'V1'ping'res);
      "poll",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_Control'V1'poll'arg,
        xdrt_Control'V1'poll'res);
      "accepted",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_Control'V1'accepted'arg,
        xdrt_Control'V1'accepted'res);
    ]
;;
let program_System'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\002'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_System'V1'ping'arg,
        xdrt_System'V1'ping'res);
      "lookup",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_System'V1'lookup'arg,
        xdrt_System'V1'lookup'res);
      "send_message",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_System'V1'send_message'arg,
        xdrt_System'V1'send_message'res);
      "log",
        ((Rtypes.mk_uint4('\000','\000','\000','\003')),
        xdrt_System'V1'log'arg,
        xdrt_System'V1'log'res);
    ]
;;
let program_Admin'V1 =
  Rpc_program.create
    (Rtypes.mk_uint4('\000','\000','\000','\003'))
    (Rtypes.mk_uint4('\000','\000','\000','\001'))
    (Xdr.validate_xdr_type_system [])
    [
      "ping",
        ((Rtypes.mk_uint4('\000','\000','\000','\000')),
        xdrt_Admin'V1'ping'arg,
        xdrt_Admin'V1'ping'res);
      "list",
        ((Rtypes.mk_uint4('\000','\000','\000','\001')),
        xdrt_Admin'V1'list'arg,
        xdrt_Admin'V1'list'res);
      "enable",
        ((Rtypes.mk_uint4('\000','\000','\000','\002')),
        xdrt_Admin'V1'enable'arg,
        xdrt_Admin'V1'enable'res);
      "disable",
        ((Rtypes.mk_uint4('\000','\000','\000','\003')),
        xdrt_Admin'V1'disable'arg,
        xdrt_Admin'V1'disable'res);
      "restart",
        ((Rtypes.mk_uint4('\000','\000','\000','\004')),
        xdrt_Admin'V1'restart'arg,
        xdrt_Admin'V1'restart'res);
      "restart_all",
        ((Rtypes.mk_uint4('\000','\000','\000','\005')),
        xdrt_Admin'V1'restart_all'arg,
        xdrt_Admin'V1'restart_all'res);
      "shutdown",
        ((Rtypes.mk_uint4('\000','\000','\000','\006')),
        xdrt_Admin'V1'shutdown'arg,
        xdrt_Admin'V1'shutdown'res);
      "reopen_logfiles",
        ((Rtypes.mk_uint4('\000','\000','\000','\007')),
        xdrt_Admin'V1'reopen_logfiles'arg,
        xdrt_Admin'V1'reopen_logfiles'res);
      "send_admin_message",
        ((Rtypes.mk_uint4('\000','\000','\000','\008')),
        xdrt_Admin'V1'send_admin_message'arg,
        xdrt_Admin'V1'send_admin_message'res);
    ]
;;

