(************************************************************
 * WARNING!
 *
 * This file is generated by ocamlrpcgen from the source file
 * netplex_ctrl.x
 *
 ************************************************************)
module Control = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Control'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
    let ping client arg =
      _to_Control'V1'ping'res (Rpc_client.sync_call client "ping" (_of_Control'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      Rpc_client.add_call client "ping" (_of_Control'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_Control'V1'ping'res (g())))
      
    
    let poll client arg =
      _to_Control'V1'poll'res (Rpc_client.sync_call client "poll" (_of_Control'V1'poll'arg arg))
    
    let poll'async client arg pass_reply =
      Rpc_client.add_call client "poll" (_of_Control'V1'poll'arg arg)
        (fun g -> pass_reply (fun () -> _to_Control'V1'poll'res (g())))
      
    
    let accepted client arg =
      _to_Control'V1'accepted'res (Rpc_client.sync_call client "accepted" (_of_Control'V1'accepted'arg arg))
    
    let accepted'async client arg pass_reply =
      Rpc_client.add_call client "accepted" (_of_Control'V1'accepted'arg arg)
        (fun g -> pass_reply (fun () -> _to_Control'V1'accepted'res (g())))
      
    
    
  end
  
end

module System = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_System'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
    let ping client arg =
      _to_System'V1'ping'res (Rpc_client.sync_call client "ping" (_of_System'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      Rpc_client.add_call client "ping" (_of_System'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'ping'res (g())))
      
    
    let lookup client arg =
      _to_System'V1'lookup'res (Rpc_client.sync_call client "lookup" (_of_System'V1'lookup'arg arg))
    
    let lookup'async client arg pass_reply =
      Rpc_client.add_call client "lookup" (_of_System'V1'lookup'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'lookup'res (g())))
      
    
    let send_message client arg =
      _to_System'V1'send_message'res (Rpc_client.sync_call client "send_message" (_of_System'V1'send_message'arg arg))
    
    let send_message'async client arg pass_reply =
      Rpc_client.add_call client "send_message" (_of_System'V1'send_message'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'send_message'res (g())))
      
    
    let log client arg =
      _to_System'V1'log'res (Rpc_client.sync_call client "log" (_of_System'V1'log'arg arg))
    
    let log'async client arg pass_reply =
      Rpc_client.add_call client "log" (_of_System'V1'log'arg arg)
        (fun g -> pass_reply (fun () -> _to_System'V1'log'res (g())))
      
    
    
  end
  
end

module Admin = struct
  module V1 = struct
    open Netplex_ctrl_aux
    let _program = program_Admin'V1
    
    let create_client
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      connector
      protocol =
        Rpc_client.create ?program_number ?version_number esys connector protocol _program
    
    let create_portmapped_client ?esys ?program_number ?version_number host protocol =
      create_client ?esys ?program_number ?version_number (Rpc_client.Portmapped host) protocol
    
    let create_client2
      ?(esys = Unixqueue.create_unix_event_system())
      ?program_number
      ?version_number
      mode2 =
        Rpc_client.create2 ?program_number ?version_number mode2 _program esys
    
    let ping client arg =
      _to_Admin'V1'ping'res (Rpc_client.sync_call client "ping" (_of_Admin'V1'ping'arg arg))
    
    let ping'async client arg pass_reply =
      Rpc_client.add_call client "ping" (_of_Admin'V1'ping'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'ping'res (g())))
      
    
    let list client arg =
      _to_Admin'V1'list'res (Rpc_client.sync_call client "list" (_of_Admin'V1'list'arg arg))
    
    let list'async client arg pass_reply =
      Rpc_client.add_call client "list" (_of_Admin'V1'list'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'list'res (g())))
      
    
    let enable client arg =
      _to_Admin'V1'enable'res (Rpc_client.sync_call client "enable" (_of_Admin'V1'enable'arg arg))
    
    let enable'async client arg pass_reply =
      Rpc_client.add_call client "enable" (_of_Admin'V1'enable'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'enable'res (g())))
      
    
    let disable client arg =
      _to_Admin'V1'disable'res (Rpc_client.sync_call client "disable" (_of_Admin'V1'disable'arg arg))
    
    let disable'async client arg pass_reply =
      Rpc_client.add_call client "disable" (_of_Admin'V1'disable'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'disable'res (g())))
      
    
    let restart client arg =
      _to_Admin'V1'restart'res (Rpc_client.sync_call client "restart" (_of_Admin'V1'restart'arg arg))
    
    let restart'async client arg pass_reply =
      Rpc_client.add_call client "restart" (_of_Admin'V1'restart'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'restart'res (g())))
      
    
    let restart_all client arg =
      _to_Admin'V1'restart_all'res (Rpc_client.sync_call client "restart_all" (_of_Admin'V1'restart_all'arg arg))
    
    let restart_all'async client arg pass_reply =
      Rpc_client.add_call client "restart_all" (_of_Admin'V1'restart_all'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'restart_all'res (g())))
      
    
    let shutdown client arg =
      _to_Admin'V1'shutdown'res (Rpc_client.sync_call client "shutdown" (_of_Admin'V1'shutdown'arg arg))
    
    let shutdown'async client arg pass_reply =
      Rpc_client.add_call client "shutdown" (_of_Admin'V1'shutdown'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'shutdown'res (g())))
      
    
    let reopen_logfiles client arg =
      _to_Admin'V1'reopen_logfiles'res (Rpc_client.sync_call client "reopen_logfiles" (_of_Admin'V1'reopen_logfiles'arg arg))
    
    let reopen_logfiles'async client arg pass_reply =
      Rpc_client.add_call client "reopen_logfiles" (_of_Admin'V1'reopen_logfiles'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'reopen_logfiles'res (g())))
      
    
    let send_admin_message client arg =
      _to_Admin'V1'send_admin_message'res (Rpc_client.sync_call client "send_admin_message" (_of_Admin'V1'send_admin_message'arg arg))
    
    let send_admin_message'async client arg pass_reply =
      Rpc_client.add_call client "send_admin_message" (_of_Admin'V1'send_admin_message'arg arg)
        (fun g -> pass_reply (fun () -> _to_Admin'V1'send_admin_message'res (g())))
      
    
    
  end
  
end


