.TH "Bigarray.Array1" 3 2011-12-01 OCamldoc "OCaml library"
.SH NAME
Bigarray.Array1 \- One-dimensional arrays.
.SH Module
Module   Bigarray.Array1
.SH Documentation
.sp
Module
.BI "Array1"
 : 
.B sig  end

.sp
One\-dimensional arrays\&. The 
.B Array1
structure provides operations
similar to those of
.B Bigarray\&.Genarray
, but specialized to the case of one\-dimensional arrays\&.
(The 
.B Array2
and 
.B Array3
structures below provide operations
specialized for two\- and three\-dimensional arrays\&.)
Statically knowing the number of dimensions of the array allows
faster operations, and more precise static type\-checking\&.
.sp

.sp

.sp
.sp
.I type 
.B ('a, 'b, 'c)
.I t 

.sp
The type of one\-dimensional big arrays whose elements have
Caml type 
.B \&'a
, representation kind 
.B \&'b
, and memory layout 
.B \&'c
\&.
.sp

.sp

.I val create 
: 
.B ('a, 'b) Bigarray.kind ->
.B   'c Bigarray.layout -> int -> ('a, 'b, 'c) t
.sp

.B Array1\&.create kind layout dim
returns a new bigarray of
one dimension, whose size is 
.B dim
\&.  
.B kind
and 
.B layout
determine the array element kind and the array layout
as described for 
.B Genarray\&.create
\&.
.sp

.sp

.I val dim 
: 
.B ('a, 'b, 'c) t -> int
.sp
Return the size (dimension) of the given one\-dimensional
big array\&.
.sp

.sp

.I val kind 
: 
.B ('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind
.sp
Return the kind of the given big array\&.
.sp

.sp

.I val layout 
: 
.B ('a, 'b, 'c) t -> 'c Bigarray.layout
.sp
Return the layout of the given big array\&.
.sp

.sp

.I val get 
: 
.B ('a, 'b, 'c) t -> int -> 'a
.sp

.B Array1\&.get a x
, or alternatively 
.B a\&.{x}
,
returns the element of 
.B a
at index 
.B x
\&.
.B x
must be greater or equal than 
.B 0
and strictly less than
.B Array1\&.dim a
if 
.B a
has C layout\&.  If 
.B a
has Fortran layout,
.B x
must be greater or equal than 
.B 1
and less or equal than
.B Array1\&.dim a
\&.  Otherwise, 
.B Invalid_argument
is raised\&.
.sp

.sp

.I val set 
: 
.B ('a, 'b, 'c) t -> int -> 'a -> unit
.sp

.B Array1\&.set a x v
, also written 
.B a\&.{x} <\- v
,
stores the value 
.B v
at index 
.B x
in 
.B a
\&.
.B x
must be inside the bounds of 
.B a
as described in
.B Bigarray\&.Array1\&.get
;
otherwise, 
.B Invalid_argument
is raised\&.
.sp

.sp

.I val sub 
: 
.B ('a, 'b, 'c) t ->
.B   int -> int -> ('a, 'b, 'c) t
.sp
Extract a sub\-array of the given one\-dimensional big array\&.
See 
.B Genarray\&.sub_left
for more details\&.
.sp

.sp

.I val blit 
: 
.B ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit
.sp
Copy the first big array to the second big array\&.
See 
.B Genarray\&.blit
for more details\&.
.sp

.sp

.I val fill 
: 
.B ('a, 'b, 'c) t -> 'a -> unit
.sp
Fill the given big array with the given value\&.
See 
.B Genarray\&.fill
for more details\&.
.sp

.sp

.I val of_array 
: 
.B ('a, 'b) Bigarray.kind ->
.B   'c Bigarray.layout -> 'a array -> ('a, 'b, 'c) t
.sp
Build a one\-dimensional big array initialized from the
given array\&.
.sp

.sp

.I val map_file 
: 
.B Unix.file_descr ->
.B   ?pos:int64 ->
.B   ('a, 'b) Bigarray.kind ->
.B   'c Bigarray.layout -> bool -> int -> ('a, 'b, 'c) t
.sp
Memory mapping of a file as a one\-dimensional big array\&.
See 
.B Bigarray\&.Genarray\&.map_file
for more details\&.
.sp

.sp

.I val unsafe_get 
: 
.B ('a, 'b, 'c) t -> int -> 'a
.sp
Like 
.B Bigarray\&.Array1\&.get
, but bounds checking is not always performed\&.
Use with caution and only when the program logic guarantees that
the access is within bounds\&.
.sp

.sp

.I val unsafe_set 
: 
.B ('a, 'b, 'c) t -> int -> 'a -> unit
.sp
Like 
.B Bigarray\&.Array1\&.set
, but bounds checking is not always performed\&.
Use with caution and only when the program logic guarantees that
the access is within bounds\&.
.sp

.sp
