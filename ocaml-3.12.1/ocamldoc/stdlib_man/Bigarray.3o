.TH "Bigarray" 3 2011-12-01 OCamldoc "OCaml library"
.SH NAME
Bigarray \- Large, multi-dimensional, numerical arrays.
.SH Module
Module   Bigarray
.SH Documentation
.sp
Module
.BI "Bigarray"
 : 
.B sig  end

.sp
Large, multi\-dimensional, numerical arrays\&.
.sp
This module implements multi\-dimensional arrays of integers and
floating\-point numbers, thereafter referred to as ``big arrays\&'\&'\&.
The implementation allows efficient sharing of large numerical
arrays between Caml code and C or Fortran numerical libraries\&.
.sp
Concerning the naming conventions, users of this module are encouraged
to do 
.B open Bigarray
in their source, then refer to array types and
operations via short dot notation, e\&.g\&. 
.B Array1\&.t
or 
.B Array2\&.sub
\&.
.sp
Big arrays support all the Caml ad\-hoc polymorphic operations:
.sp
\-comparisons (
.B =
, 
.B <>
, 
.B <=
, etc, as well as 
.B Pervasives\&.compare
);
.sp
\-hashing (module 
.B Hash
);
.sp
\-and structured input\-output (
.B Pervasives\&.output_value
and 
.B Pervasives\&.input_value
, as well as the functions from the
.B Marshal
module)\&.

.sp

.sp

.sp
.sp

.PP

.B === 
.B Element kinds
.B  ===

.PP

.PP

.B === Big arrays can contain elements of the following kinds:
.B \- IEEE single precision (32 bits) floating\-point numbers
.B    (Bigarray\&.float32_elt),
.B \- IEEE double precision (64 bits) floating\-point numbers
.B    (Bigarray\&.float64_elt),
.B \- IEEE single precision (2 * 32 bits) floating\-point complex numbers
.B    (Bigarray\&.complex32_elt),
.B \- IEEE double precision (2 * 64 bits) floating\-point complex numbers
.B    (Bigarray\&.complex64_elt),
.B \- 8\-bit integers (signed or unsigned)
.B    (Bigarray\&.int8_signed_elt or Bigarray\&.int8_unsigned_elt),
.B \- 16\-bit integers (signed or unsigned)
.B    (Bigarray\&.int16_signed_elt or Bigarray\&.int16_unsigned_elt),
.B \- Caml integers (signed, 31 bits on 32\-bit architectures,
.B    63 bits on 64\-bit architectures) (Bigarray\&.int_elt),
.B \- 32\-bit signed integer (Bigarray\&.int32_elt),
.B \- 64\-bit signed integers (Bigarray\&.int64_elt),
.B \- platform\-native signed integers (32 bits on 32\-bit architectures,
.B    64 bits on 64\-bit architectures) (Bigarray\&.nativeint_elt)\&.
.B 
.B    Each element kind is represented at the type level by one
.B    of the abstract types defined below\&. ===

.PP
.I type float32_elt 

.sp

.sp
.I type float64_elt 

.sp

.sp
.I type complex32_elt 

.sp

.sp
.I type complex64_elt 

.sp

.sp
.I type int8_signed_elt 

.sp

.sp
.I type int8_unsigned_elt 

.sp

.sp
.I type int16_signed_elt 

.sp

.sp
.I type int16_unsigned_elt 

.sp

.sp
.I type int_elt 

.sp

.sp
.I type int32_elt 

.sp

.sp
.I type int64_elt 

.sp

.sp
.I type nativeint_elt 

.sp

.sp
.I type 
.B ('a, 'b)
.I kind 

.sp
To each element kind is associated a Caml type, which is
the type of Caml values that can be stored in the big array
or read back from it\&.  This type is not necessarily the same
as the type of the array elements proper: for instance,
a big array whose elements are of kind 
.B float32_elt
contains
32\-bit single precision floats, but reading or writing one of
its elements from Caml uses the Caml type 
.B float
, which is
64\-bit double precision floats\&.
.sp
The abstract type 
.B (\&'a, \&'b) kind
captures this association
of a Caml type 
.B \&'a
for values read or written in the big array,
and of an element kind 
.B \&'b
which represents the actual contents
of the big array\&.  The following predefined values of type
.B kind
list all possible associations of Caml types with
element kinds:
.sp

.sp

.I val float32 
: 
.B (float, float32_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val float64 
: 
.B (float, float64_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val complex32 
: 
.B (Complex.t, complex32_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val complex64 
: 
.B (Complex.t, complex64_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int8_signed 
: 
.B (int, int8_signed_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int8_unsigned 
: 
.B (int, int8_unsigned_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int16_signed 
: 
.B (int, int16_signed_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int16_unsigned 
: 
.B (int, int16_unsigned_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int 
: 
.B (int, int_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int32 
: 
.B (int32, int32_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val int64 
: 
.B (int64, int64_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val nativeint 
: 
.B (nativeint, nativeint_elt) kind
.sp
See 
.B Bigarray\&.char
\&.
.sp

.sp

.I val char 
: 
.B (char, int8_unsigned_elt) kind
.sp
As shown by the types of the values above,
big arrays of kind 
.B float32_elt
and 
.B float64_elt
are
accessed using the Caml type 
.B float
\&.  Big arrays of complex kinds
.B complex32_elt
, 
.B complex64_elt
are accessed with the Caml type
.B Complex\&.t
\&.  Big arrays of
integer kinds are accessed using the smallest Caml integer
type large enough to represent the array elements:
.B int
for 8\- and 16\-bit integer bigarrays, as well as Caml\-integer
bigarrays; 
.B int32
for 32\-bit integer bigarrays; 
.B int64
for 64\-bit integer bigarrays; and 
.B nativeint
for
platform\-native integer bigarrays\&.  Finally, big arrays of
kind 
.B int8_unsigned_elt
can also be accessed as arrays of
characters instead of arrays of small integers, by using
the kind value 
.B char
instead of 
.B int8_unsigned
\&.
.sp

.sp

.PP

.B === 
.B Array layouts
.B  ===

.PP
.I type c_layout 

.sp
See 
.B Bigarray\&.fortran_layout
\&.
.sp

.sp
.I type fortran_layout 

.sp
To facilitate interoperability with existing C and Fortran code,
this library supports two different memory layouts for big arrays,
one compatible with the C conventions,
the other compatible with the Fortran conventions\&.
.sp
In the C\-style layout, array indices start at 0, and
multi\-dimensional arrays are laid out in row\-major format\&.
That is, for a two\-dimensional array, all elements of
row 0 are contiguous in memory, followed by all elements of
row 1, etc\&.  In other terms, the array elements at 
.B (x,y)
and 
.B (x, y+1)
are adjacent in memory\&.
.sp
In the Fortran\-style layout, array indices start at 1, and
multi\-dimensional arrays are laid out in column\-major format\&.
That is, for a two\-dimensional array, all elements of
column 0 are contiguous in memory, followed by all elements of
column 1, etc\&.  In other terms, the array elements at 
.B (x,y)
and 
.B (x+1, y)
are adjacent in memory\&.
.sp
Each layout style is identified at the type level by the
abstract types 
.B Bigarray\&.c_layout
and 
.B fortran_layout
respectively\&.
.sp

.sp
.I type 
.B 'a
.I layout 

.sp
The type 
.B \&'a layout
represents one of the two supported
memory layouts: C\-style if 
.B \&'a
is 
.B Bigarray\&.c_layout
, Fortran\-style
if 
.B \&'a
is 
.B Bigarray\&.fortran_layout
\&.
.sp

.sp

.PP

.B === 
.B Supported layouts
.B 
.B 
.B    The abstract values c_layout and fortran_layout represent
.B    the two supported layouts at the level of values\&. ===

.PP

.I val c_layout 
: 
.B c_layout layout
.sp

.sp

.I val fortran_layout 
: 
.B fortran_layout layout
.sp

.sp

.PP

.B === 
.B Generic arrays (of arbitrarily many dimensions)
.B  ===

.PP
.I module Genarray : 
.B sig  end

.sp

.sp

.PP

.B === 
.B One\-dimensional arrays
.B  ===

.PP
.I module Array1 : 
.B sig  end

.sp
One\-dimensional arrays\&. The 
.B Array1
structure provides operations
similar to those of
.B Bigarray\&.Genarray
, but specialized to the case of one\-dimensional arrays\&.
(The 
.B Array2
and 
.B Array3
structures below provide operations
specialized for two\- and three\-dimensional arrays\&.)
Statically knowing the number of dimensions of the array allows
faster operations, and more precise static type\-checking\&.
.sp

.sp

.PP

.B === 
.B Two\-dimensional arrays
.B  ===

.PP
.I module Array2 : 
.B sig  end

.sp
Two\-dimensional arrays\&. The 
.B Array2
structure provides operations
similar to those of 
.B Bigarray\&.Genarray
, but specialized to the
case of two\-dimensional arrays\&.
.sp

.sp

.PP

.B === 
.B Three\-dimensional arrays
.B  ===

.PP
.I module Array3 : 
.B sig  end

.sp
Three\-dimensional arrays\&. The 
.B Array3
structure provides operations
similar to those of 
.B Bigarray\&.Genarray
, but specialized to the case
of three\-dimensional arrays\&.
.sp

.sp

.PP

.B === 
.B Coercions between generic big arrays and fixed\-dimension big arrays
.B  ===

.PP

.I val genarray_of_array1 
: 
.B ('a, 'b, 'c) Array1.t -> ('a, 'b, 'c) Genarray.t
.sp
Return the generic big array corresponding to the given one\-dimensional
big array\&.
.sp

.sp

.I val genarray_of_array2 
: 
.B ('a, 'b, 'c) Array2.t -> ('a, 'b, 'c) Genarray.t
.sp
Return the generic big array corresponding to the given two\-dimensional
big array\&.
.sp

.sp

.I val genarray_of_array3 
: 
.B ('a, 'b, 'c) Array3.t -> ('a, 'b, 'c) Genarray.t
.sp
Return the generic big array corresponding to the given three\-dimensional
big array\&.
.sp

.sp

.I val array1_of_genarray 
: 
.B ('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array1.t
.sp
Return the one\-dimensional big array corresponding to the given
generic big array\&.  Raise 
.B Invalid_argument
if the generic big array
does not have exactly one dimension\&.
.sp

.sp

.I val array2_of_genarray 
: 
.B ('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array2.t
.sp
Return the two\-dimensional big array corresponding to the given
generic big array\&.  Raise 
.B Invalid_argument
if the generic big array
does not have exactly two dimensions\&.
.sp

.sp

.I val array3_of_genarray 
: 
.B ('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array3.t
.sp
Return the three\-dimensional big array corresponding to the given
generic big array\&.  Raise 
.B Invalid_argument
if the generic big array
does not have exactly three dimensions\&.
.sp

.sp

.PP

.B === 
.B Re\-shaping big arrays
.B  ===

.PP

.I val reshape 
: 
.B ('a, 'b, 'c) Genarray.t ->
.B   int array -> ('a, 'b, 'c) Genarray.t
.sp

.B reshape b [|d1;\&.\&.\&.;dN|]
converts the big array 
.B b
to a
.B N
\-dimensional array of dimensions 
.B d1
\&.\&.\&.
.B dN
\&.  The returned
array and the original array 
.B b
share their data
and have the same layout\&.  For instance, assuming that 
.B b
is a one\-dimensional array of dimension 12, 
.B reshape b [|3;4|]
returns a two\-dimensional array 
.B b\&'
of dimensions 3 and 4\&.
If 
.B b
has C layout, the element 
.B (x,y)
of 
.B b\&'
corresponds
to the element 
.B x * 3 + y
of 
.B b
\&.  If 
.B b
has Fortran layout,
the element 
.B (x,y)
of 
.B b\&'
corresponds to the element
.B x + (y \- 1) * 4
of 
.B b
\&.
The returned big array must have exactly the same number of
elements as the original big array 
.B b
\&.  That is, the product
of the dimensions of 
.B b
must be equal to 
.B i1 * \&.\&.\&. * iN
\&.
Otherwise, 
.B Invalid_argument
is raised\&.
.sp

.sp

.I val reshape_1 
: 
.B ('a, 'b, 'c) Genarray.t -> int -> ('a, 'b, 'c) Array1.t
.sp
Specialized version of 
.B Bigarray\&.reshape
for reshaping to
one\-dimensional arrays\&.
.sp

.sp

.I val reshape_2 
: 
.B ('a, 'b, 'c) Genarray.t ->
.B   int -> int -> ('a, 'b, 'c) Array2.t
.sp
Specialized version of 
.B Bigarray\&.reshape
for reshaping to
two\-dimensional arrays\&.
.sp

.sp

.I val reshape_3 
: 
.B ('a, 'b, 'c) Genarray.t ->
.B   int -> int -> int -> ('a, 'b, 'c) Array3.t
.sp
Specialized version of 
.B Bigarray\&.reshape
for reshaping to
three\-dimensional arrays\&.
.sp

.sp
