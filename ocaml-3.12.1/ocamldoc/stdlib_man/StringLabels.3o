.TH "StringLabels" 3 2011-12-01 OCamldoc "OCaml library"
.SH NAME
StringLabels \- String operations.
.SH Module
Module   StringLabels
.SH Documentation
.sp
Module
.BI "StringLabels"
 : 
.B sig  end

.sp
String operations\&.
.sp

.sp

.sp
.sp

.I val length 
: 
.B string -> int
.sp
Return the length (number of characters) of the given string\&.
.sp

.sp

.I val get 
: 
.B string -> int -> char
.sp

.B String\&.get s n
returns character number 
.B n
in string 
.B s
\&.
The first character is character number 0\&.
The last character is character number 
.B String\&.length s \- 1
\&.
You can also write 
.B s\&.[n]
instead of 
.B String\&.get s n
\&.
.sp
Raise 
.B Invalid_argument "index out of bounds"
if 
.B n
is outside the range 0 to 
.B (String\&.length s \- 1)
\&.
.sp

.sp

.I val set 
: 
.B string -> int -> char -> unit
.sp

.B String\&.set s n c
modifies string 
.B s
in place,
replacing the character number 
.B n
by 
.B c
\&.
You can also write 
.B s\&.[n] <\- c
instead of 
.B String\&.set s n c
\&.
Raise 
.B Invalid_argument "index out of bounds"
if 
.B n
is outside the range 0 to 
.B (String\&.length s \- 1)
\&.
.sp

.sp

.I val create 
: 
.B int -> string
.sp

.B String\&.create n
returns a fresh string of length 
.B n
\&.
The string initially contains arbitrary characters\&.
Raise 
.B Invalid_argument
if 
.B n < 0
or 
.B n > Sys\&.max_string_length
\&.
.sp

.sp

.I val make 
: 
.B int -> char -> string
.sp

.B String\&.make n c
returns a fresh string of length 
.B n
,
filled with the character 
.B c
\&.
Raise 
.B Invalid_argument
if 
.B n < 0
or 
.B n > 
.B Sys\&.max_string_length
\&.
.sp

.sp

.I val copy 
: 
.B string -> string
.sp
Return a copy of the given string\&.
.sp

.sp

.I val sub 
: 
.B string -> pos:int -> len:int -> string
.sp

.B String\&.sub s start len
returns a fresh string of length 
.B len
,
containing the characters number 
.B start
to 
.B start + len \- 1
of string 
.B s
\&.
Raise 
.B Invalid_argument
if 
.B start
and 
.B len
do not
designate a valid substring of 
.B s
; that is, if 
.B start < 0
,
or 
.B len < 0
, or 
.B start + len > 
.B StringLabels\&.length
.B  s
\&.
.sp

.sp

.I val fill 
: 
.B string -> pos:int -> len:int -> char -> unit
.sp

.B String\&.fill s start len c
modifies string 
.B s
in place,
replacing the characters number 
.B start
to 
.B start + len \- 1
by 
.B c
\&.
Raise 
.B Invalid_argument
if 
.B start
and 
.B len
do not
designate a valid substring of 
.B s
\&.
.sp

.sp

.I val blit 
: 
.B src:string -> src_pos:int -> dst:string -> dst_pos:int -> len:int -> unit
.sp

.B String\&.blit src srcoff dst dstoff len
copies 
.B len
characters
from string 
.B src
, starting at character number 
.B srcoff
, to
string 
.B dst
, starting at character number 
.B dstoff
\&. It works
correctly even if 
.B src
and 
.B dst
are the same string,
and the source and destination chunks overlap\&.
Raise 
.B Invalid_argument
if 
.B srcoff
and 
.B len
do not
designate a valid substring of 
.B src
, or if 
.B dstoff
and 
.B len
do not designate a valid substring of 
.B dst
\&.
.sp

.sp

.I val concat 
: 
.B sep:string -> string list -> string
.sp

.B String\&.concat sep sl
concatenates the list of strings 
.B sl
,
inserting the separator string 
.B sep
between each\&.
.sp

.sp

.I val iter 
: 
.B f:(char -> unit) -> string -> unit
.sp

.B String\&.iter f s
applies function 
.B f
in turn to all
the characters of 
.B s
\&.  It is equivalent to
.B f s\&.[0]; f s\&.[1]; \&.\&.\&.; f s\&.[String\&.length s \- 1]; ()
\&.
.sp

.sp

.I val escaped 
: 
.B string -> string
.sp
Return a copy of the argument, with special characters
represented by escape sequences, following the lexical
conventions of Objective Caml\&.  If there is no special
character in the argument, return the original string itself,
not a copy\&.
.sp

.sp

.I val index 
: 
.B string -> char -> int
.sp

.B String\&.index s c
returns the position of the leftmost
occurrence of character 
.B c
in string 
.B s
\&.
Raise 
.B Not_found
if 
.B c
does not occur in 
.B s
\&.
.sp

.sp

.I val rindex 
: 
.B string -> char -> int
.sp

.B String\&.rindex s c
returns the position of the rightmost
occurrence of character 
.B c
in string 
.B s
\&.
Raise 
.B Not_found
if 
.B c
does not occur in 
.B s
\&.
.sp

.sp

.I val index_from 
: 
.B string -> int -> char -> int
.sp
Same as 
.B StringLabels\&.index
, but start
searching at the character position given as second argument\&.
.B String\&.index s c
is equivalent to 
.B String\&.index_from s 0 c
\&.
.sp

.sp

.I val rindex_from 
: 
.B string -> int -> char -> int
.sp
Same as 
.B StringLabels\&.rindex
, but start
searching at the character position given as second argument\&.
.B String\&.rindex s c
is equivalent to
.B String\&.rindex_from s (String\&.length s \- 1) c
\&.
.sp

.sp

.I val contains 
: 
.B string -> char -> bool
.sp

.B String\&.contains s c
tests if character 
.B c
appears in the string 
.B s
\&.
.sp

.sp

.I val contains_from 
: 
.B string -> int -> char -> bool
.sp

.B String\&.contains_from s start c
tests if character 
.B c
appears in the substring of 
.B s
starting from 
.B start
to the end
of 
.B s
\&.
Raise 
.B Invalid_argument
if 
.B start
is not a valid index of 
.B s
\&.
.sp

.sp

.I val rcontains_from 
: 
.B string -> int -> char -> bool
.sp

.B String\&.rcontains_from s stop c
tests if character 
.B c
appears in the substring of 
.B s
starting from the beginning
of 
.B s
to index 
.B stop
\&.
Raise 
.B Invalid_argument
if 
.B stop
is not a valid index of 
.B s
\&.
.sp

.sp

.I val uppercase 
: 
.B string -> string
.sp
Return a copy of the argument, with all lowercase letters
translated to uppercase, including accented letters of the ISO
Latin\-1 (8859\-1) character set\&.
.sp

.sp

.I val lowercase 
: 
.B string -> string
.sp
Return a copy of the argument, with all uppercase letters
translated to lowercase, including accented letters of the ISO
Latin\-1 (8859\-1) character set\&.
.sp

.sp

.I val capitalize 
: 
.B string -> string
.sp
Return a copy of the argument, with the first character set to uppercase\&.
.sp

.sp

.I val uncapitalize 
: 
.B string -> string
.sp
Return a copy of the argument, with the first character set to lowercase\&.
.sp

.sp
.I type t 
= 
.B string

.sp
An alias for the type of strings\&.
.sp

.sp

.I val compare 
: 
.B t -> t -> int
.sp
The comparison function for strings, with the same specification as
.B Pervasives\&.compare
\&.  Along with the type 
.B t
, this function 
.B compare
allows the module 
.B String
to be passed as argument to the functors
.B Set\&.Make
and 
.B Map\&.Make
\&.
.sp

.sp
